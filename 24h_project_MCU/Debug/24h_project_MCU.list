
24h_project_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003844  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003958  08003958  00013958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a8  080039a8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080039a8  080039a8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039a8  080039a8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080039b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200000a8  08003a58  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003a58  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084f4  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190d  00000000  00000000  000285c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00029ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001723c  00000000  00000000  0002b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9ea  00000000  00000000  00042424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853b0  00000000  00000000  0004ce0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d21be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  000d2210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800393c 	.word	0x0800393c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	0800393c 	.word	0x0800393c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <PressedKeyProcess>:
		break;
	default:
		break;
	}
}
void PressedKeyProcess(int index){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	switch (index){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d026      	beq.n	8000ac4 <PressedKeyProcess+0x5c>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	dc36      	bgt.n	8000aea <PressedKeyProcess+0x82>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <PressedKeyProcess+0x22>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d00a      	beq.n	8000a9e <PressedKeyProcess+0x36>
		button_flag[2]=1;
		led7seg(counter--);
		if(counter<0) counter=9;
		break;
	default:
		break;
 8000a88:	e02f      	b.n	8000aea <PressedKeyProcess+0x82>
		button_flag[0]=1;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <PressedKeyProcess+0x94>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
		led7seg(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f8d3 	bl	8000c3c <led7seg>
		counter=0;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <PressedKeyProcess+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		break;
 8000a9c:	e02a      	b.n	8000af4 <PressedKeyProcess+0x8c>
		button_flag[1]=1;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <PressedKeyProcess+0x94>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
		led7seg(counter++);
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <PressedKeyProcess+0x98>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	4915      	ldr	r1, [pc, #84]	; (8000b00 <PressedKeyProcess+0x98>)
 8000aac:	600a      	str	r2, [r1, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c4 	bl	8000c3c <led7seg>
		if(counter>=10) counter=0;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <PressedKeyProcess+0x98>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b09      	cmp	r3, #9
 8000aba:	dd18      	ble.n	8000aee <PressedKeyProcess+0x86>
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <PressedKeyProcess+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
		break;
 8000ac2:	e014      	b.n	8000aee <PressedKeyProcess+0x86>
		button_flag[2]=1;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <PressedKeyProcess+0x94>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	609a      	str	r2, [r3, #8]
		led7seg(counter--);
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <PressedKeyProcess+0x98>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	490b      	ldr	r1, [pc, #44]	; (8000b00 <PressedKeyProcess+0x98>)
 8000ad2:	600a      	str	r2, [r1, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f8b1 	bl	8000c3c <led7seg>
		if(counter<0) counter=9;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <PressedKeyProcess+0x98>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da07      	bge.n	8000af2 <PressedKeyProcess+0x8a>
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <PressedKeyProcess+0x98>)
 8000ae4:	2209      	movs	r2, #9
 8000ae6:	601a      	str	r2, [r3, #0]
		break;
 8000ae8:	e003      	b.n	8000af2 <PressedKeyProcess+0x8a>
		break;
 8000aea:	bf00      	nop
 8000aec:	e002      	b.n	8000af4 <PressedKeyProcess+0x8c>
		break;
 8000aee:	bf00      	nop
 8000af0:	e000      	b.n	8000af4 <PressedKeyProcess+0x8c>
		break;
 8000af2:	bf00      	nop
	}

}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000c4 	.word	0x200000c4
 8000b00:	200000d0 	.word	0x200000d0

08000b04 <getKeyInput>:

void getKeyInput(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
for(int i=0;i<3;i++){
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e07d      	b.n	8000c0c <getKeyInput+0x108>
	KeyReg0[i]=KeyReg1[i];
 8000b10:	4a43      	ldr	r2, [pc, #268]	; (8000c20 <getKeyInput+0x11c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b18:	4942      	ldr	r1, [pc, #264]	; (8000c24 <getKeyInput+0x120>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[i]=KeyReg2[i];
 8000b20:	4a41      	ldr	r2, [pc, #260]	; (8000c28 <getKeyInput+0x124>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b28:	493d      	ldr	r1, [pc, #244]	; (8000c20 <getKeyInput+0x11c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[i]=HAL_GPIO_ReadPin(GPIOC, RESET_Pin*pow(2,i));
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fc5f 	bl	80003f4 <__aeabi_i2d>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b42:	f002 f817 	bl	8002b74 <pow>
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <getKeyInput+0x128>)
 8000b4c:	f7ff fcbc 	bl	80004c8 <__aeabi_dmul>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	4610      	mov	r0, r2
 8000b56:	4619      	mov	r1, r3
 8000b58:	f7ff ff66 	bl	8000a28 <__aeabi_d2uiz>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	4833      	ldr	r0, [pc, #204]	; (8000c30 <getKeyInput+0x12c>)
 8000b64:	f000 ffc0 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <getKeyInput+0x124>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if((KeyReg0[i]==KeyReg1[i])&&(KeyReg1[i]==KeyReg2[i])){
 8000b74:	4a2b      	ldr	r2, [pc, #172]	; (8000c24 <getKeyInput+0x120>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b7c:	4928      	ldr	r1, [pc, #160]	; (8000c20 <getKeyInput+0x11c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d13e      	bne.n	8000c06 <getKeyInput+0x102>
 8000b88:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <getKeyInput+0x11c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b90:	4925      	ldr	r1, [pc, #148]	; (8000c28 <getKeyInput+0x124>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d134      	bne.n	8000c06 <getKeyInput+0x102>
		if(KeyReg3[i]!=KeyReg2[i]){
 8000b9c:	4a25      	ldr	r2, [pc, #148]	; (8000c34 <getKeyInput+0x130>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ba4:	4920      	ldr	r1, [pc, #128]	; (8000c28 <getKeyInput+0x124>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d015      	beq.n	8000bdc <getKeyInput+0xd8>
			KeyReg3[i]=KeyReg2[i];
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <getKeyInput+0x124>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bb8:	491e      	ldr	r1, [pc, #120]	; (8000c34 <getKeyInput+0x130>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(KeyReg2[i]==PRESSED_STATE){
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <getKeyInput+0x124>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11c      	bne.n	8000c06 <getKeyInput+0x102>
				PressedKeyProcess(i);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff4b 	bl	8000a68 <PressedKeyProcess>
				//after 3 sec button change to pressed_more_than_3sec_state
				TimeForKeyPress=300;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <getKeyInput+0x134>)
 8000bd4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e014      	b.n	8000c06 <getKeyInput+0x102>
				}
		}else{
			TimeForKeyPress--;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <getKeyInput+0x134>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <getKeyInput+0x134>)
 8000be4:	6013      	str	r3, [r2, #0]
			if(TimeForKeyPress==0) {
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <getKeyInput+0x134>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10b      	bne.n	8000c06 <getKeyInput+0x102>
				//pressed_more_than_3sec_state

				if(KeyReg2[i]==PRESSED_STATE) PressedKeyProcess(i);
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <getKeyInput+0x124>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <getKeyInput+0xfc>
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff34 	bl	8000a68 <PressedKeyProcess>
				TimeForKeyPress=100;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <getKeyInput+0x134>)
 8000c02:	2264      	movs	r2, #100	; 0x64
 8000c04:	601a      	str	r2, [r3, #0]
for(int i=0;i<3;i++){
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	f77f af7e 	ble.w	8000b10 <getKeyInput+0xc>
				}
			}
	}//end if
}//end for

}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000018 	.word	0x20000018
 8000c2c:	40c00000 	.word	0x40c00000
 8000c30:	40011000 	.word	0x40011000
 8000c34:	20000024 	.word	0x20000024
 8000c38:	20000030 	.word	0x20000030

08000c3c <led7seg>:
 *      Author: legolas
 */

#include "display7seg.h"
#include "main.h"
void led7seg(int count){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if(count==0){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d127      	bne.n	8000c9a <led7seg+0x5e>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	48cf      	ldr	r0, [pc, #828]	; (8000f8c <led7seg+0x350>)
 8000c50:	f000 ff61 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	48cc      	ldr	r0, [pc, #816]	; (8000f8c <led7seg+0x350>)
 8000c5a:	f000 ff5c 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c64:	48c9      	ldr	r0, [pc, #804]	; (8000f8c <led7seg+0x350>)
 8000c66:	f000 ff56 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	48c6      	ldr	r0, [pc, #792]	; (8000f8c <led7seg+0x350>)
 8000c72:	f000 ff50 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7c:	48c3      	ldr	r0, [pc, #780]	; (8000f8c <led7seg+0x350>)
 8000c7e:	f000 ff4a 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c88:	48c0      	ldr	r0, [pc, #768]	; (8000f8c <led7seg+0x350>)
 8000c8a:	f000 ff44 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	48bd      	ldr	r0, [pc, #756]	; (8000f8c <led7seg+0x350>)
 8000c96:	f000 ff3e 	bl	8001b16 <HAL_GPIO_WritePin>
	}
	if(count==1){
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d127      	bne.n	8000cf0 <led7seg+0xb4>

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	48b9      	ldr	r0, [pc, #740]	; (8000f8c <led7seg+0x350>)
 8000ca6:	f000 ff36 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	48b7      	ldr	r0, [pc, #732]	; (8000f8c <led7seg+0x350>)
 8000cb0:	f000 ff31 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	48b4      	ldr	r0, [pc, #720]	; (8000f8c <led7seg+0x350>)
 8000cbc:	f000 ff2b 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc6:	48b1      	ldr	r0, [pc, #708]	; (8000f8c <led7seg+0x350>)
 8000cc8:	f000 ff25 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd2:	48ae      	ldr	r0, [pc, #696]	; (8000f8c <led7seg+0x350>)
 8000cd4:	f000 ff1f 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cde:	48ab      	ldr	r0, [pc, #684]	; (8000f8c <led7seg+0x350>)
 8000ce0:	f000 ff19 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cea:	48a8      	ldr	r0, [pc, #672]	; (8000f8c <led7seg+0x350>)
 8000cec:	f000 ff13 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	if(count==2){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d127      	bne.n	8000d46 <led7seg+0x10a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	48a4      	ldr	r0, [pc, #656]	; (8000f8c <led7seg+0x350>)
 8000cfc:	f000 ff0b 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	48a1      	ldr	r0, [pc, #644]	; (8000f8c <led7seg+0x350>)
 8000d06:	f000 ff06 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d10:	489e      	ldr	r0, [pc, #632]	; (8000f8c <led7seg+0x350>)
 8000d12:	f000 ff00 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1c:	489b      	ldr	r0, [pc, #620]	; (8000f8c <led7seg+0x350>)
 8000d1e:	f000 fefa 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d28:	4898      	ldr	r0, [pc, #608]	; (8000f8c <led7seg+0x350>)
 8000d2a:	f000 fef4 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	4895      	ldr	r0, [pc, #596]	; (8000f8c <led7seg+0x350>)
 8000d36:	f000 feee 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d40:	4892      	ldr	r0, [pc, #584]	; (8000f8c <led7seg+0x350>)
 8000d42:	f000 fee8 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	if(count==3){
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d127      	bne.n	8000d9c <led7seg+0x160>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	488e      	ldr	r0, [pc, #568]	; (8000f8c <led7seg+0x350>)
 8000d52:	f000 fee0 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	488c      	ldr	r0, [pc, #560]	; (8000f8c <led7seg+0x350>)
 8000d5c:	f000 fedb 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d66:	4889      	ldr	r0, [pc, #548]	; (8000f8c <led7seg+0x350>)
 8000d68:	f000 fed5 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d72:	4886      	ldr	r0, [pc, #536]	; (8000f8c <led7seg+0x350>)
 8000d74:	f000 fecf 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7e:	4883      	ldr	r0, [pc, #524]	; (8000f8c <led7seg+0x350>)
 8000d80:	f000 fec9 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8a:	4880      	ldr	r0, [pc, #512]	; (8000f8c <led7seg+0x350>)
 8000d8c:	f000 fec3 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d96:	487d      	ldr	r0, [pc, #500]	; (8000f8c <led7seg+0x350>)
 8000d98:	f000 febd 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	if(count==4){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d127      	bne.n	8000df2 <led7seg+0x1b6>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	4879      	ldr	r0, [pc, #484]	; (8000f8c <led7seg+0x350>)
 8000da8:	f000 feb5 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4876      	ldr	r0, [pc, #472]	; (8000f8c <led7seg+0x350>)
 8000db2:	f000 feb0 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	4873      	ldr	r0, [pc, #460]	; (8000f8c <led7seg+0x350>)
 8000dbe:	f000 feaa 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc8:	4870      	ldr	r0, [pc, #448]	; (8000f8c <led7seg+0x350>)
 8000dca:	f000 fea4 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd4:	486d      	ldr	r0, [pc, #436]	; (8000f8c <led7seg+0x350>)
 8000dd6:	f000 fe9e 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	486a      	ldr	r0, [pc, #424]	; (8000f8c <led7seg+0x350>)
 8000de2:	f000 fe98 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dec:	4867      	ldr	r0, [pc, #412]	; (8000f8c <led7seg+0x350>)
 8000dee:	f000 fe92 	bl	8001b16 <HAL_GPIO_WritePin>
				}
	if(count==5){
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b05      	cmp	r3, #5
 8000df6:	d127      	bne.n	8000e48 <led7seg+0x20c>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4863      	ldr	r0, [pc, #396]	; (8000f8c <led7seg+0x350>)
 8000dfe:	f000 fe8a 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4861      	ldr	r0, [pc, #388]	; (8000f8c <led7seg+0x350>)
 8000e08:	f000 fe85 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e12:	485e      	ldr	r0, [pc, #376]	; (8000f8c <led7seg+0x350>)
 8000e14:	f000 fe7f 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	485b      	ldr	r0, [pc, #364]	; (8000f8c <led7seg+0x350>)
 8000e20:	f000 fe79 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4858      	ldr	r0, [pc, #352]	; (8000f8c <led7seg+0x350>)
 8000e2c:	f000 fe73 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e36:	4855      	ldr	r0, [pc, #340]	; (8000f8c <led7seg+0x350>)
 8000e38:	f000 fe6d 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e42:	4852      	ldr	r0, [pc, #328]	; (8000f8c <led7seg+0x350>)
 8000e44:	f000 fe67 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	if(count==6){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d127      	bne.n	8000e9e <led7seg+0x262>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	484e      	ldr	r0, [pc, #312]	; (8000f8c <led7seg+0x350>)
 8000e54:	f000 fe5f 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	484b      	ldr	r0, [pc, #300]	; (8000f8c <led7seg+0x350>)
 8000e5e:	f000 fe5a 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e68:	4848      	ldr	r0, [pc, #288]	; (8000f8c <led7seg+0x350>)
 8000e6a:	f000 fe54 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e74:	4845      	ldr	r0, [pc, #276]	; (8000f8c <led7seg+0x350>)
 8000e76:	f000 fe4e 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e80:	4842      	ldr	r0, [pc, #264]	; (8000f8c <led7seg+0x350>)
 8000e82:	f000 fe48 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e8c:	483f      	ldr	r0, [pc, #252]	; (8000f8c <led7seg+0x350>)
 8000e8e:	f000 fe42 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e98:	483c      	ldr	r0, [pc, #240]	; (8000f8c <led7seg+0x350>)
 8000e9a:	f000 fe3c 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	if(count==7){
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b07      	cmp	r3, #7
 8000ea2:	d127      	bne.n	8000ef4 <led7seg+0x2b8>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	4838      	ldr	r0, [pc, #224]	; (8000f8c <led7seg+0x350>)
 8000eaa:	f000 fe34 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	4836      	ldr	r0, [pc, #216]	; (8000f8c <led7seg+0x350>)
 8000eb4:	f000 fe2f 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ebe:	4833      	ldr	r0, [pc, #204]	; (8000f8c <led7seg+0x350>)
 8000ec0:	f000 fe29 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eca:	4830      	ldr	r0, [pc, #192]	; (8000f8c <led7seg+0x350>)
 8000ecc:	f000 fe23 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	482d      	ldr	r0, [pc, #180]	; (8000f8c <led7seg+0x350>)
 8000ed8:	f000 fe1d 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee2:	482a      	ldr	r0, [pc, #168]	; (8000f8c <led7seg+0x350>)
 8000ee4:	f000 fe17 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eee:	4827      	ldr	r0, [pc, #156]	; (8000f8c <led7seg+0x350>)
 8000ef0:	f000 fe11 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	if(count==8){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d127      	bne.n	8000f4a <led7seg+0x30e>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2140      	movs	r1, #64	; 0x40
 8000efe:	4823      	ldr	r0, [pc, #140]	; (8000f8c <led7seg+0x350>)
 8000f00:	f000 fe09 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	4820      	ldr	r0, [pc, #128]	; (8000f8c <led7seg+0x350>)
 8000f0a:	f000 fe04 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f14:	481d      	ldr	r0, [pc, #116]	; (8000f8c <led7seg+0x350>)
 8000f16:	f000 fdfe 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f20:	481a      	ldr	r0, [pc, #104]	; (8000f8c <led7seg+0x350>)
 8000f22:	f000 fdf8 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	4817      	ldr	r0, [pc, #92]	; (8000f8c <led7seg+0x350>)
 8000f2e:	f000 fdf2 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f38:	4814      	ldr	r0, [pc, #80]	; (8000f8c <led7seg+0x350>)
 8000f3a:	f000 fdec 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <led7seg+0x350>)
 8000f46:	f000 fde6 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	if(count==9){
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b09      	cmp	r3, #9
 8000f4e:	d12c      	bne.n	8000faa <led7seg+0x36e>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <led7seg+0x350>)
 8000f56:	f000 fdde 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <led7seg+0x350>)
 8000f60:	f000 fdd9 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <led7seg+0x350>)
 8000f6c:	f000 fdd3 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <led7seg+0x350>)
 8000f78:	f000 fdcd 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <led7seg+0x350>)
 8000f84:	f000 fdc7 	bl	8001b16 <HAL_GPIO_WritePin>
 8000f88:	e002      	b.n	8000f90 <led7seg+0x354>
 8000f8a:	bf00      	nop
 8000f8c:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <led7seg+0x378>)
 8000f98:	f000 fdbd 	bl	8001b16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <led7seg+0x378>)
 8000fa4:	f000 fdb7 	bl	8001b16 <HAL_GPIO_WritePin>
		}
	return;
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
}
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <fsm_simple_buttons_run>:
#include "main.h"
#include "display7seg.h"
#include "global.h"
#include "button.h"
#include "software_timer.h"
void fsm_simple_buttons_run(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	switch (state){
 8000fbc:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <fsm_simple_buttons_run+0xec>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d049      	beq.n	8001058 <fsm_simple_buttons_run+0xa0>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	dc65      	bgt.n	8001094 <fsm_simple_buttons_run+0xdc>
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <fsm_simple_buttons_run+0x1a>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d007      	beq.n	8000fe0 <fsm_simple_buttons_run+0x28>
				if(counter>0) setTimer1(1000);
				else {led7seg(0);state=SETTING;}
			}
			break;
		default:
			break;
 8000fd0:	e060      	b.n	8001094 <fsm_simple_buttons_run+0xdc>
			led7seg(8);
 8000fd2:	2008      	movs	r0, #8
 8000fd4:	f7ff fe32 	bl	8000c3c <led7seg>
			state=SETTING;
 8000fd8:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <fsm_simple_buttons_run+0xec>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
			break;
 8000fde:	e05e      	b.n	800109e <fsm_simple_buttons_run+0xe6>
			led7seg(counter);
 8000fe0:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <fsm_simple_buttons_run+0xf0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe29 	bl	8000c3c <led7seg>
			if(button_flag[0]==1){//RESET BUTTON PRESSED
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <fsm_simple_buttons_run+0xf4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d107      	bne.n	8001002 <fsm_simple_buttons_run+0x4a>
				button_flag[0]=0;//reset flag for reset_button
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <fsm_simple_buttons_run+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
				setTimer2(10000);
 8000ff8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ffc:	f000 f9c8 	bl	8001390 <setTimer2>
 8001000:	e016      	b.n	8001030 <fsm_simple_buttons_run+0x78>
			else if (button_flag[1]==1){//INCREASE BUTTON PRESSED
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <fsm_simple_buttons_run+0xf4>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d107      	bne.n	800101a <fsm_simple_buttons_run+0x62>
				button_flag[1]=0;//reset flag for inc_button
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <fsm_simple_buttons_run+0xf4>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
				setTimer2(10000);
 8001010:	f242 7010 	movw	r0, #10000	; 0x2710
 8001014:	f000 f9bc 	bl	8001390 <setTimer2>
 8001018:	e00a      	b.n	8001030 <fsm_simple_buttons_run+0x78>
			else if (button_flag[2]==1){//DECREASE BUTTON PRESSED
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <fsm_simple_buttons_run+0xf4>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d106      	bne.n	8001030 <fsm_simple_buttons_run+0x78>
				button_flag[2]=0;//reset flag for dec_button
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <fsm_simple_buttons_run+0xf4>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
				setTimer2(10000);
 8001028:	f242 7010 	movw	r0, #10000	; 0x2710
 800102c:	f000 f9b0 	bl	8001390 <setTimer2>
			if(timer2_flag==1) {
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <fsm_simple_buttons_run+0xf8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12f      	bne.n	8001098 <fsm_simple_buttons_run+0xe0>
				timer2_flag=0;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <fsm_simple_buttons_run+0xf8>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
				counter--;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <fsm_simple_buttons_run+0xf0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <fsm_simple_buttons_run+0xf0>)
 8001046:	6013      	str	r3, [r2, #0]
				state = AUTO_DECREASE;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <fsm_simple_buttons_run+0xec>)
 800104a:	2202      	movs	r2, #2
 800104c:	601a      	str	r2, [r3, #0]
				setTimer1(1000);}
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f000 f94d 	bl	80012f0 <setTimer1>
			break;
 8001056:	e01f      	b.n	8001098 <fsm_simple_buttons_run+0xe0>
			led7seg(counter);
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <fsm_simple_buttons_run+0xf0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fded 	bl	8000c3c <led7seg>
			if(timer1_flag==1) {
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <fsm_simple_buttons_run+0xfc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d118      	bne.n	800109c <fsm_simple_buttons_run+0xe4>
				counter--;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <fsm_simple_buttons_run+0xf0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <fsm_simple_buttons_run+0xf0>)
 8001072:	6013      	str	r3, [r2, #0]
				if(counter>0) setTimer1(1000);
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <fsm_simple_buttons_run+0xf0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dd04      	ble.n	8001086 <fsm_simple_buttons_run+0xce>
 800107c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001080:	f000 f936 	bl	80012f0 <setTimer1>
			break;
 8001084:	e00a      	b.n	800109c <fsm_simple_buttons_run+0xe4>
				else {led7seg(0);state=SETTING;}
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fdd8 	bl	8000c3c <led7seg>
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <fsm_simple_buttons_run+0xec>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
			break;
 8001092:	e003      	b.n	800109c <fsm_simple_buttons_run+0xe4>
			break;
 8001094:	bf00      	nop
 8001096:	e002      	b.n	800109e <fsm_simple_buttons_run+0xe6>
			break;
 8001098:	bf00      	nop
 800109a:	e000      	b.n	800109e <fsm_simple_buttons_run+0xe6>
			break;
 800109c:	bf00      	nop

	}

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000d4 	.word	0x200000d4
 80010a8:	200000d0 	.word	0x200000d0
 80010ac:	200000c4 	.word	0x200000c4
 80010b0:	20000128 	.word	0x20000128
 80010b4:	20000120 	.word	0x20000120

080010b8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int counter_for_debug_led=100;
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	counter_for_debug_led--;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010c8:	6013      	str	r3, [r2, #0]
	if(counter_for_debug_led<=0){
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dc06      	bgt.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x28>
		counter_for_debug_led=100;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010d4:	2264      	movs	r2, #100	; 0x64
 80010d6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80010d8:	2120      	movs	r1, #32
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010dc:	f000 fd33 	bl	8001b46 <HAL_GPIO_TogglePin>
	}
if(state==SETTING) getKeyInput();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x34>
 80010e8:	f7ff fd0c 	bl	8000b04 <getKeyInput>
timer2_run();
 80010ec:	f000 f936 	bl	800135c <timer2_run>
timer1_run();
 80010f0:	f000 f91a 	bl	8001328 <timer1_run>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000034 	.word	0x20000034
 8001100:	40010800 	.word	0x40010800
 8001104:	200000d4 	.word	0x200000d4

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f000 fa00 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f812 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f000 f898 	bl	8001248 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001118:	f000 f84a 	bl	80011b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <main+0x28>)
 800111e:	f001 f963 	bl	80023e8 <HAL_TIM_Base_Start_IT>
  state=INIT;
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <main+0x2c>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_simple_buttons_run();
 8001128:	f7ff ff46 	bl	8000fb8 <fsm_simple_buttons_run>
 800112c:	e7fc      	b.n	8001128 <main+0x20>
 800112e:	bf00      	nop
 8001130:	200000d8 	.word	0x200000d8
 8001134:	200000d4 	.word	0x200000d4

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b090      	sub	sp, #64	; 0x40
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0318 	add.w	r3, r7, #24
 8001142:	2228      	movs	r2, #40	; 0x28
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fd0c 	bl	8002b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001162:	2310      	movs	r3, #16
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fd02 	bl	8001b78 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800117a:	f000 f8b3 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f000 ff70 	bl	800207c <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011a2:	f000 f89f 	bl	80012e4 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3740      	adds	r7, #64	; 0x40
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_TIM2_Init+0x94>)
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_TIM2_Init+0x94>)
 80011d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_TIM2_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_TIM2_Init+0x94>)
 80011e4:	2209      	movs	r2, #9
 80011e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_TIM2_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM2_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_TIM2_Init+0x94>)
 80011f6:	f001 f8a7 	bl	8002348 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001200:	f000 f870 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_TIM2_Init+0x94>)
 8001212:	f001 fa3d 	bl	8002690 <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800121c:	f000 f862 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM2_Init+0x94>)
 800122e:	f001 fc05 	bl	8002a3c <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001238:	f000 f854 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000d8 	.word	0x200000d8

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_GPIO_Init+0x90>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <MX_GPIO_Init+0x90>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_GPIO_Init+0x90>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_GPIO_Init+0x90>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <MX_GPIO_Init+0x90>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_GPIO_Init+0x90>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 51ff 	mov.w	r1, #8160	; 0x1fe0
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <MX_GPIO_Init+0x94>)
 8001294:	f000 fc3f 	bl	8001b16 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|INC_Pin|DEC_Pin;
 8001298:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800129c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_GPIO_Init+0x98>)
 80012ae:	f000 fa9f 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin SEG0_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 80012b2:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
 80012b6:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_GPIO_Init+0x94>)
 80012cc:	f000 fa90 	bl	80017f0 <HAL_GPIO_Init>

}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40011000 	.word	0x40011000

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <setTimer1>:
int timer1_counter=0;

int timer2_flag=0;
int timer2_counter=0;

void setTimer1(int duration){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TICK;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <setTimer1+0x2c>)
 80012fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001300:	1092      	asrs	r2, r2, #2
 8001302:	17db      	asrs	r3, r3, #31
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	4a06      	ldr	r2, [pc, #24]	; (8001320 <setTimer1+0x30>)
 8001308:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <setTimer1+0x34>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	66666667 	.word	0x66666667
 8001320:	20000124 	.word	0x20000124
 8001324:	20000120 	.word	0x20000120

08001328 <timer1_run>:
void cleanTimer1(){
	timer1_counter=0;
	timer1_flag=0;
}

void timer1_run(){
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <timer1_run+0x2c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd0b      	ble.n	800134c <timer1_run+0x24>
		timer1_counter--;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <timer1_run+0x2c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <timer1_run+0x2c>)
 800133c:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0) timer1_flag=1;
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <timer1_run+0x2c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dc02      	bgt.n	800134c <timer1_run+0x24>
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <timer1_run+0x30>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
	}
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000124 	.word	0x20000124
 8001358:	20000120 	.word	0x20000120

0800135c <timer2_run>:

void timer2_run(){
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	if(timer2_counter>0){
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <timer2_run+0x2c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd0b      	ble.n	8001380 <timer2_run+0x24>
		timer2_counter--;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <timer2_run+0x2c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a06      	ldr	r2, [pc, #24]	; (8001388 <timer2_run+0x2c>)
 8001370:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0) timer2_flag=1;
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <timer2_run+0x2c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	dc02      	bgt.n	8001380 <timer2_run+0x24>
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <timer2_run+0x30>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
	}
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	2000012c 	.word	0x2000012c
 800138c:	20000128 	.word	0x20000128

08001390 <setTimer2>:
void cleanTimer2(){
	timer1_counter=0;
	timer1_flag=0;
}

void setTimer2(int duration){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/TICK;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <setTimer2+0x2c>)
 800139c:	fb82 1203 	smull	r1, r2, r2, r3
 80013a0:	1092      	asrs	r2, r2, #2
 80013a2:	17db      	asrs	r3, r3, #31
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <setTimer2+0x30>)
 80013a8:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <setTimer2+0x34>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	66666667 	.word	0x66666667
 80013c0:	2000012c 	.word	0x2000012c
 80013c4:	20000128 	.word	0x20000128

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_MspInit+0x40>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_MspInit+0x40>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_MspInit+0x40>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_MspInit+0x40>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_MspInit+0x40>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_MspInit+0x40>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141c:	d113      	bne.n	8001446 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_TIM_Base_MspInit+0x44>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_TIM_Base_MspInit+0x44>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_TIM_Base_MspInit+0x44>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	201c      	movs	r0, #28
 800143c:	f000 f9a1 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001440:	201c      	movs	r0, #28
 8001442:	f000 f9ba 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f87f 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <TIM2_IRQHandler+0x10>)
 80014aa:	f000 ffe9 	bl	8002480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200000d8 	.word	0x200000d8

080014b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c6:	490d      	ldr	r1, [pc, #52]	; (80014fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014dc:	4c0a      	ldr	r4, [pc, #40]	; (8001508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ea:	f7ff ffe5 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f001 fb15 	bl	8002b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f2:	f7ff fe09 	bl	8001108 <main>
  bx lr
 80014f6:	4770      	bx	lr
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001500:	080039b0 	.word	0x080039b0
  ldr r2, =_sbss
 8001504:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001508:	20000134 	.word	0x20000134

0800150c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC1_2_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_Init+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_Init+0x28>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001520:	2003      	movs	r0, #3
 8001522:	f000 f923 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001526:	200f      	movs	r0, #15
 8001528:	f000 f808 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152c:	f7ff ff4c 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x54>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f93b 	bl	80017d6 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00e      	b.n	8001588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d80a      	bhi.n	8001586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 f903 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_InitTick+0x5c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000038 	.word	0x20000038
 8001594:	20000040 	.word	0x20000040
 8001598:	2000003c 	.word	0x2000003c

0800159c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x1c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_IncTick+0x20>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a03      	ldr	r2, [pc, #12]	; (80015bc <HAL_IncTick+0x20>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	20000040 	.word	0x20000040
 80015bc:	20000130 	.word	0x20000130

080015c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <HAL_GetTick+0x10>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000130 	.word	0x20000130

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4906      	ldr	r1, [pc, #24]	; (800166c <__NVIC_EnableIRQ+0x34>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff90 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff2d 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff42 	bl	800161c <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff35 	bl	8001638 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	e161      	b.n	8001ac8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001804:	2201      	movs	r2, #1
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8150 	bne.w	8001ac2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a97      	ldr	r2, [pc, #604]	; (8001a84 <HAL_GPIO_Init+0x294>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d05e      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800182c:	4a95      	ldr	r2, [pc, #596]	; (8001a84 <HAL_GPIO_Init+0x294>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d875      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001832:	4a95      	ldr	r2, [pc, #596]	; (8001a88 <HAL_GPIO_Init+0x298>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d058      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001838:	4a93      	ldr	r2, [pc, #588]	; (8001a88 <HAL_GPIO_Init+0x298>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d86f      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800183e:	4a93      	ldr	r2, [pc, #588]	; (8001a8c <HAL_GPIO_Init+0x29c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d052      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001844:	4a91      	ldr	r2, [pc, #580]	; (8001a8c <HAL_GPIO_Init+0x29c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d869      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800184a:	4a91      	ldr	r2, [pc, #580]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04c      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001850:	4a8f      	ldr	r2, [pc, #572]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d863      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001856:	4a8f      	ldr	r2, [pc, #572]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d046      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800185c:	4a8d      	ldr	r2, [pc, #564]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d85d      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001862:	2b12      	cmp	r3, #18
 8001864:	d82a      	bhi.n	80018bc <HAL_GPIO_Init+0xcc>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d859      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_GPIO_Init+0x80>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018c5 	.word	0x080018c5
 8001878:	080018d7 	.word	0x080018d7
 800187c:	08001919 	.word	0x08001919
 8001880:	0800191f 	.word	0x0800191f
 8001884:	0800191f 	.word	0x0800191f
 8001888:	0800191f 	.word	0x0800191f
 800188c:	0800191f 	.word	0x0800191f
 8001890:	0800191f 	.word	0x0800191f
 8001894:	0800191f 	.word	0x0800191f
 8001898:	0800191f 	.word	0x0800191f
 800189c:	0800191f 	.word	0x0800191f
 80018a0:	0800191f 	.word	0x0800191f
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	0800191f 	.word	0x0800191f
 80018ac:	0800191f 	.word	0x0800191f
 80018b0:	0800191f 	.word	0x0800191f
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018e1 	.word	0x080018e1
 80018bc:	4a76      	ldr	r2, [pc, #472]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c2:	e02c      	b.n	800191e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e029      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	3304      	adds	r3, #4
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e024      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	3308      	adds	r3, #8
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e01f      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	330c      	adds	r3, #12
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e01a      	b.n	8001920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f2:	2304      	movs	r3, #4
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e013      	b.n	8001920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	611a      	str	r2, [r3, #16]
          break;
 800190a:	e009      	b.n	8001920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	615a      	str	r2, [r3, #20]
          break;
 8001916:	e003      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x130>
          break;
 800191e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d801      	bhi.n	800192a <HAL_GPIO_Init+0x13a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	e001      	b.n	800192e <HAL_GPIO_Init+0x13e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d802      	bhi.n	800193c <HAL_GPIO_Init+0x14c>
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x152>
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3b08      	subs	r3, #8
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	210f      	movs	r1, #15
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	6a39      	ldr	r1, [r7, #32]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80a9 	beq.w	8001ac2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001988:	4a45      	ldr	r2, [pc, #276]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3d      	ldr	r2, [pc, #244]	; (8001aa4 <HAL_GPIO_Init+0x2b4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00d      	beq.n	80019d0 <HAL_GPIO_Init+0x1e0>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d007      	beq.n	80019cc <HAL_GPIO_Init+0x1dc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_GPIO_Init+0x1d8>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019c8:	2303      	movs	r3, #3
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019d0:	2300      	movs	r3, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e2:	492f      	ldr	r1, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	492b      	ldr	r1, [pc, #172]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4927      	ldr	r1, [pc, #156]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4921      	ldr	r1, [pc, #132]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	491d      	ldr	r1, [pc, #116]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4917      	ldr	r1, [pc, #92]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4913      	ldr	r1, [pc, #76]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d01f      	beq.n	8001ab4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e01f      	b.n	8001ac2 <HAL_GPIO_Init+0x2d2>
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_GPIO_Init+0x2f4>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <HAL_GPIO_Init+0x2f4>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f ae96 	bne.w	8001804 <HAL_GPIO_Init+0x14>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	372c      	adds	r7, #44	; 0x2c
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]
 8001b22:	4613      	mov	r3, r2
 8001b24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b26:	787b      	ldrb	r3, [r7, #1]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b32:	e003      	b.n	8001b3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	041a      	lsls	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	611a      	str	r2, [r3, #16]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b58:	887a      	ldrh	r2, [r7, #2]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	041a      	lsls	r2, r3, #16
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	400b      	ands	r3, r1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e272      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8087 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b98:	4b92      	ldr	r3, [pc, #584]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d00c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba4:	4b8f      	ldr	r3, [pc, #572]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d112      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x5e>
 8001bb0:	4b8c      	ldr	r3, [pc, #560]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbe:	4b89      	ldr	r3, [pc, #548]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d06c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x12c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d168      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e24c      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x76>
 8001be0:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a7f      	ldr	r2, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e02e      	b.n	8001c4c <HAL_RCC_OscConfig+0xd4>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x98>
 8001bf6:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7a      	ldr	r2, [pc, #488]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a77      	ldr	r2, [pc, #476]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xd4>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0xbc>
 8001c1a:	4b72      	ldr	r3, [pc, #456]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a71      	ldr	r2, [pc, #452]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b6f      	ldr	r3, [pc, #444]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6e      	ldr	r2, [pc, #440]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xd4>
 8001c34:	4b6b      	ldr	r3, [pc, #428]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6a      	ldr	r2, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a67      	ldr	r2, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fcb4 	bl	80015c0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fcb0 	bl	80015c0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e200      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xe4>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fca0 	bl	80015c0 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fc9c 	bl	80015c0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1ec      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x10c>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb2:	4b4c      	ldr	r3, [pc, #304]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x18c>
 8001cca:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x176>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e1c0      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4939      	ldr	r1, [pc, #228]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e03a      	b.n	8001d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7ff fc55 	bl	80015c0 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fc51 	bl	80015c0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1a1      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4927      	ldr	r1, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc34 	bl	80015c0 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc30 	bl	80015c0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e180      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d03a      	beq.n	8001dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d019      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_RCC_OscConfig+0x274>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff fc14 	bl	80015c0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fc10 	bl	80015c0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e160      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f000 faa6 	bl	800230c <RCC_Delay>
 8001dc0:	e01c      	b.n	8001dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_RCC_OscConfig+0x274>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fbfa 	bl	80015c0 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dce:	e00f      	b.n	8001df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fbf6 	bl	80015c0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d908      	bls.n	8001df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e146      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	42420000 	.word	0x42420000
 8001dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e9      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80a6 	beq.w	8001f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0e:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10d      	bne.n	8001e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a87      	ldr	r2, [pc, #540]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b85      	ldr	r3, [pc, #532]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b82      	ldr	r3, [pc, #520]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e42:	4b7f      	ldr	r3, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7e      	ldr	r2, [pc, #504]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fbb7 	bl	80015c0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff fbb3 	bl	80015c0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	; 0x64
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e103      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b75      	ldr	r3, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x312>
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a6e      	ldr	r2, [pc, #440]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e02d      	b.n	8001ee6 <HAL_RCC_OscConfig+0x36e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x334>
 8001e92:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a66      	ldr	r2, [pc, #408]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
 8001eaa:	e01c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x36e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d10c      	bne.n	8001ece <HAL_RCC_OscConfig+0x356>
 8001eb4:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a60      	ldr	r2, [pc, #384]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e00b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x36e>
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d015      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fb67 	bl	80015c0 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff fb63 	bl	80015c0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0b1      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ee      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x37e>
 8001f18:	e014      	b.n	8001f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fb51 	bl	80015c0 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fb4d 	bl	80015c0 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e09b      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d105      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4a:	4b3c      	ldr	r3, [pc, #240]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8087 	beq.w	800206e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d061      	beq.n	8002030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d146      	bne.n	8002002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fb21 	bl	80015c0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff fb1d 	bl	80015c0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e06d      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	4921      	ldr	r1, [pc, #132]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a19      	ldr	r1, [r3, #32]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff faf1 	bl	80015c0 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff faed 	bl	80015c0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e03d      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x46a>
 8002000:	e035      	b.n	800206e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fada 	bl	80015c0 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fad6 	bl	80015c0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e026      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x498>
 800202e:	e01e      	b.n	800206e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e019      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
 8002044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_OscConfig+0x500>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d0      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4965      	ldr	r1, [pc, #404]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b8      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	494d      	ldr	r1, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d040      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e073      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06b      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4936      	ldr	r1, [pc, #216]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7ff fa28 	bl	80015c0 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7ff fa24 	bl	80015c0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e053      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d210      	bcs.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4922      	ldr	r1, [pc, #136]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e032      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4916      	ldr	r1, [pc, #88]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800220a:	f000 f821 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800220e:	4602      	mov	r2, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	490a      	ldr	r1, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	5ccb      	ldrb	r3, [r1, r3]
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1cc>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f986 	bl	800153c <HAL_InitTick>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	08003968 	.word	0x08003968
 8002248:	20000038 	.word	0x20000038
 800224c:	2000003c 	.word	0x2000003c

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b490      	push	{r4, r7}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_GetSysClockFreq+0xac>)
 8002258:	1d3c      	adds	r4, r7, #4
 800225a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002260:	f240 2301 	movw	r3, #513	; 0x201
 8002264:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb0>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x40>
 800228a:	2b08      	cmp	r3, #8
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x46>
 800228e:	e02b      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002292:	623b      	str	r3, [r7, #32]
      break;
 8002294:	e02b      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	0c9b      	lsrs	r3, r3, #18
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3328      	adds	r3, #40	; 0x28
 80022a0:	443b      	add	r3, r7
 80022a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d012      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0c5b      	lsrs	r3, r3, #17
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	3328      	adds	r3, #40	; 0x28
 80022be:	443b      	add	r3, r7
 80022c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ca:	fb03 f202 	mul.w	r2, r3, r2
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e004      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	623b      	str	r3, [r7, #32]
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ea:	623b      	str	r3, [r7, #32]
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	6a3b      	ldr	r3, [r7, #32]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc90      	pop	{r4, r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	08003958 	.word	0x08003958
 8002300:	40021000 	.word	0x40021000
 8002304:	007a1200 	.word	0x007a1200
 8002308:	003d0900 	.word	0x003d0900

0800230c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <RCC_Delay+0x34>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <RCC_Delay+0x38>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0a5b      	lsrs	r3, r3, #9
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002328:	bf00      	nop
  }
  while (Delay --);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	60fa      	str	r2, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f9      	bne.n	8002328 <RCC_Delay+0x1c>
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	20000038 	.word	0x20000038
 8002344:	10624dd3 	.word	0x10624dd3

08002348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e041      	b.n	80023de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f84c 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f000 fa6a 	bl	8002860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d001      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e035      	b.n	800246c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_TIM_Base_Start_IT+0x90>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_TIM_Base_Start_IT+0x4e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242a:	d004      	beq.n	8002436 <HAL_TIM_Base_Start_IT+0x4e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a12      	ldr	r2, [pc, #72]	; (800247c <HAL_TIM_Base_Start_IT+0x94>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d111      	bne.n	800245a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b06      	cmp	r3, #6
 8002446:	d010      	beq.n	800246a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	e007      	b.n	800246a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400

08002480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d122      	bne.n	80024dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d11b      	bne.n	80024dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0202 	mvn.w	r2, #2
 80024ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f9b1 	bl	800282a <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f9a4 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f9b3 	bl	800283c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d122      	bne.n	8002530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d11b      	bne.n	8002530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0204 	mvn.w	r2, #4
 8002500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f987 	bl	800282a <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f97a 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f989 	bl	800283c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b08      	cmp	r3, #8
 800253c:	d122      	bne.n	8002584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b08      	cmp	r3, #8
 800254a:	d11b      	bne.n	8002584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0208 	mvn.w	r2, #8
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2204      	movs	r2, #4
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f95d 	bl	800282a <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f950 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f95f 	bl	800283c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b10      	cmp	r3, #16
 8002590:	d122      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b10      	cmp	r3, #16
 800259e:	d11b      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0210 	mvn.w	r2, #16
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2208      	movs	r2, #8
 80025ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f933 	bl	800282a <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f926 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f935 	bl	800283c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10e      	bne.n	8002604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0201 	mvn.w	r2, #1
 80025fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fd5a 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b80      	cmp	r3, #128	; 0x80
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa67 	bl	8002afe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8f9 	bl	800284e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b20      	cmp	r3, #32
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b20      	cmp	r3, #32
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0220 	mvn.w	r2, #32
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa32 	bl	8002aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_TIM_ConfigClockSource+0x18>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e0b3      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x180>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e0:	d03e      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0xd0>
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e6:	f200 8087 	bhi.w	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	f000 8085 	beq.w	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f6:	d87f      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 80026f8:	2b70      	cmp	r3, #112	; 0x70
 80026fa:	d01a      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0xa2>
 80026fc:	2b70      	cmp	r3, #112	; 0x70
 80026fe:	d87b      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 8002700:	2b60      	cmp	r3, #96	; 0x60
 8002702:	d050      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x116>
 8002704:	2b60      	cmp	r3, #96	; 0x60
 8002706:	d877      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 8002708:	2b50      	cmp	r3, #80	; 0x50
 800270a:	d03c      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0xf6>
 800270c:	2b50      	cmp	r3, #80	; 0x50
 800270e:	d873      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d058      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x136>
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d86f      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 8002718:	2b30      	cmp	r3, #48	; 0x30
 800271a:	d064      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x156>
 800271c:	2b30      	cmp	r3, #48	; 0x30
 800271e:	d86b      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 8002720:	2b20      	cmp	r3, #32
 8002722:	d060      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x156>
 8002724:	2b20      	cmp	r3, #32
 8002726:	d867      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05c      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x156>
 800272c:	2b10      	cmp	r3, #16
 800272e:	d05a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002730:	e062      	b.n	80027f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f000 f95c 	bl	80029fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002754:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	609a      	str	r2, [r3, #8]
      break;
 800275e:	e04e      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f000 f945 	bl	80029fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002782:	609a      	str	r2, [r3, #8]
      break;
 8002784:	e03b      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	461a      	mov	r2, r3
 8002794:	f000 f8bc 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2150      	movs	r1, #80	; 0x50
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f913 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027a4:	e02b      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 f8da 	bl	800296c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2160      	movs	r1, #96	; 0x60
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f903 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027c4:	e01b      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f89c 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2140      	movs	r1, #64	; 0x40
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f8f3 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027e4:	e00b      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f000 f8ea 	bl	80029ca <TIM_ITRx_SetConfig>
        break;
 80027f6:	e002      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027f8:	bf00      	nop
 80027fa:	e000      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a25      	ldr	r2, [pc, #148]	; (8002908 <TIM_Base_SetConfig+0xa8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <TIM_Base_SetConfig+0x28>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287e:	d003      	beq.n	8002888 <TIM_Base_SetConfig+0x28>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a22      	ldr	r2, [pc, #136]	; (800290c <TIM_Base_SetConfig+0xac>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d108      	bne.n	800289a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <TIM_Base_SetConfig+0xa8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x52>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x52>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a17      	ldr	r2, [pc, #92]	; (800290c <TIM_Base_SetConfig+0xac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a07      	ldr	r2, [pc, #28]	; (8002908 <TIM_Base_SetConfig+0xa8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d103      	bne.n	80028f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	615a      	str	r2, [r3, #20]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40000400 	.word	0x40000400

08002910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 030a 	bic.w	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 0210 	bic.w	r2, r3, #16
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	031b      	lsls	r3, r3, #12
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	621a      	str	r2, [r3, #32]
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f043 0307 	orr.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e041      	b.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d004      	beq.n	8002aac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400

08002aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <__errno>:
 8002b10:	4b01      	ldr	r3, [pc, #4]	; (8002b18 <__errno+0x8>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000044 	.word	0x20000044

08002b1c <__libc_init_array>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	2600      	movs	r6, #0
 8002b20:	4d0c      	ldr	r5, [pc, #48]	; (8002b54 <__libc_init_array+0x38>)
 8002b22:	4c0d      	ldr	r4, [pc, #52]	; (8002b58 <__libc_init_array+0x3c>)
 8002b24:	1b64      	subs	r4, r4, r5
 8002b26:	10a4      	asrs	r4, r4, #2
 8002b28:	42a6      	cmp	r6, r4
 8002b2a:	d109      	bne.n	8002b40 <__libc_init_array+0x24>
 8002b2c:	f000 ff06 	bl	800393c <_init>
 8002b30:	2600      	movs	r6, #0
 8002b32:	4d0a      	ldr	r5, [pc, #40]	; (8002b5c <__libc_init_array+0x40>)
 8002b34:	4c0a      	ldr	r4, [pc, #40]	; (8002b60 <__libc_init_array+0x44>)
 8002b36:	1b64      	subs	r4, r4, r5
 8002b38:	10a4      	asrs	r4, r4, #2
 8002b3a:	42a6      	cmp	r6, r4
 8002b3c:	d105      	bne.n	8002b4a <__libc_init_array+0x2e>
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b44:	4798      	blx	r3
 8002b46:	3601      	adds	r6, #1
 8002b48:	e7ee      	b.n	8002b28 <__libc_init_array+0xc>
 8002b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4e:	4798      	blx	r3
 8002b50:	3601      	adds	r6, #1
 8002b52:	e7f2      	b.n	8002b3a <__libc_init_array+0x1e>
 8002b54:	080039a8 	.word	0x080039a8
 8002b58:	080039a8 	.word	0x080039a8
 8002b5c:	080039a8 	.word	0x080039a8
 8002b60:	080039ac 	.word	0x080039ac

08002b64 <memset>:
 8002b64:	4603      	mov	r3, r0
 8002b66:	4402      	add	r2, r0
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <memset+0xa>
 8002b6c:	4770      	bx	lr
 8002b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b72:	e7f9      	b.n	8002b68 <memset+0x4>

08002b74 <pow>:
 8002b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4680      	mov	r8, r0
 8002b7e:	4689      	mov	r9, r1
 8002b80:	f000 f862 	bl	8002c48 <__ieee754_pow>
 8002b84:	4622      	mov	r2, r4
 8002b86:	4606      	mov	r6, r0
 8002b88:	460f      	mov	r7, r1
 8002b8a:	462b      	mov	r3, r5
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fd ff34 	bl	80009fc <__aeabi_dcmpun>
 8002b94:	bbc8      	cbnz	r0, 8002c0a <pow+0x96>
 8002b96:	2200      	movs	r2, #0
 8002b98:	2300      	movs	r3, #0
 8002b9a:	4640      	mov	r0, r8
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	f7fd fefb 	bl	8000998 <__aeabi_dcmpeq>
 8002ba2:	b1b8      	cbz	r0, 8002bd4 <pow+0x60>
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	4620      	mov	r0, r4
 8002baa:	4629      	mov	r1, r5
 8002bac:	f7fd fef4 	bl	8000998 <__aeabi_dcmpeq>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d141      	bne.n	8002c38 <pow+0xc4>
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f000 fe3b 	bl	8003832 <finite>
 8002bbc:	b328      	cbz	r0, 8002c0a <pow+0x96>
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	f7fd fef1 	bl	80009ac <__aeabi_dcmplt>
 8002bca:	b1f0      	cbz	r0, 8002c0a <pow+0x96>
 8002bcc:	f7ff ffa0 	bl	8002b10 <__errno>
 8002bd0:	2322      	movs	r3, #34	; 0x22
 8002bd2:	e019      	b.n	8002c08 <pow+0x94>
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	4639      	mov	r1, r7
 8002bd8:	f000 fe2b 	bl	8003832 <finite>
 8002bdc:	b9c8      	cbnz	r0, 8002c12 <pow+0x9e>
 8002bde:	4640      	mov	r0, r8
 8002be0:	4649      	mov	r1, r9
 8002be2:	f000 fe26 	bl	8003832 <finite>
 8002be6:	b1a0      	cbz	r0, 8002c12 <pow+0x9e>
 8002be8:	4620      	mov	r0, r4
 8002bea:	4629      	mov	r1, r5
 8002bec:	f000 fe21 	bl	8003832 <finite>
 8002bf0:	b178      	cbz	r0, 8002c12 <pow+0x9e>
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	4639      	mov	r1, r7
 8002bfa:	f7fd feff 	bl	80009fc <__aeabi_dcmpun>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d0e4      	beq.n	8002bcc <pow+0x58>
 8002c02:	f7ff ff85 	bl	8002b10 <__errno>
 8002c06:	2321      	movs	r3, #33	; 0x21
 8002c08:	6003      	str	r3, [r0, #0]
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	4639      	mov	r1, r7
 8002c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c12:	2200      	movs	r2, #0
 8002c14:	2300      	movs	r3, #0
 8002c16:	4630      	mov	r0, r6
 8002c18:	4639      	mov	r1, r7
 8002c1a:	f7fd febd 	bl	8000998 <__aeabi_dcmpeq>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d0f3      	beq.n	8002c0a <pow+0x96>
 8002c22:	4640      	mov	r0, r8
 8002c24:	4649      	mov	r1, r9
 8002c26:	f000 fe04 	bl	8003832 <finite>
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d0ed      	beq.n	8002c0a <pow+0x96>
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f000 fdfe 	bl	8003832 <finite>
 8002c36:	e7c8      	b.n	8002bca <pow+0x56>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	4f01      	ldr	r7, [pc, #4]	; (8002c40 <pow+0xcc>)
 8002c3c:	e7e5      	b.n	8002c0a <pow+0x96>
 8002c3e:	bf00      	nop
 8002c40:	3ff00000 	.word	0x3ff00000
 8002c44:	00000000 	.word	0x00000000

08002c48 <__ieee754_pow>:
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	b093      	sub	sp, #76	; 0x4c
 8002c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c52:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8002c56:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002c5a:	4689      	mov	r9, r1
 8002c5c:	ea56 0102 	orrs.w	r1, r6, r2
 8002c60:	4680      	mov	r8, r0
 8002c62:	d111      	bne.n	8002c88 <__ieee754_pow+0x40>
 8002c64:	1803      	adds	r3, r0, r0
 8002c66:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002c6a:	4152      	adcs	r2, r2
 8002c6c:	4299      	cmp	r1, r3
 8002c6e:	4b82      	ldr	r3, [pc, #520]	; (8002e78 <__ieee754_pow+0x230>)
 8002c70:	4193      	sbcs	r3, r2
 8002c72:	f080 84b9 	bcs.w	80035e8 <__ieee754_pow+0x9a0>
 8002c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	f7fd fa6d 	bl	800015c <__adddf3>
 8002c82:	4683      	mov	fp, r0
 8002c84:	468c      	mov	ip, r1
 8002c86:	e06f      	b.n	8002d68 <__ieee754_pow+0x120>
 8002c88:	4b7c      	ldr	r3, [pc, #496]	; (8002e7c <__ieee754_pow+0x234>)
 8002c8a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002c8e:	429c      	cmp	r4, r3
 8002c90:	464d      	mov	r5, r9
 8002c92:	4682      	mov	sl, r0
 8002c94:	dc06      	bgt.n	8002ca4 <__ieee754_pow+0x5c>
 8002c96:	d101      	bne.n	8002c9c <__ieee754_pow+0x54>
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d1ec      	bne.n	8002c76 <__ieee754_pow+0x2e>
 8002c9c:	429e      	cmp	r6, r3
 8002c9e:	dc01      	bgt.n	8002ca4 <__ieee754_pow+0x5c>
 8002ca0:	d10f      	bne.n	8002cc2 <__ieee754_pow+0x7a>
 8002ca2:	b172      	cbz	r2, 8002cc2 <__ieee754_pow+0x7a>
 8002ca4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002ca8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002cac:	ea55 050a 	orrs.w	r5, r5, sl
 8002cb0:	d1e1      	bne.n	8002c76 <__ieee754_pow+0x2e>
 8002cb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002cb6:	18db      	adds	r3, r3, r3
 8002cb8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002cbc:	4152      	adcs	r2, r2
 8002cbe:	429d      	cmp	r5, r3
 8002cc0:	e7d5      	b.n	8002c6e <__ieee754_pow+0x26>
 8002cc2:	2d00      	cmp	r5, #0
 8002cc4:	da39      	bge.n	8002d3a <__ieee754_pow+0xf2>
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <__ieee754_pow+0x238>)
 8002cc8:	429e      	cmp	r6, r3
 8002cca:	dc52      	bgt.n	8002d72 <__ieee754_pow+0x12a>
 8002ccc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002cd0:	429e      	cmp	r6, r3
 8002cd2:	f340 849c 	ble.w	800360e <__ieee754_pow+0x9c6>
 8002cd6:	1533      	asrs	r3, r6, #20
 8002cd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002cdc:	2b14      	cmp	r3, #20
 8002cde:	dd0f      	ble.n	8002d00 <__ieee754_pow+0xb8>
 8002ce0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002ce4:	fa22 f103 	lsr.w	r1, r2, r3
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	4293      	cmp	r3, r2
 8002cee:	f040 848e 	bne.w	800360e <__ieee754_pow+0x9c6>
 8002cf2:	f001 0101 	and.w	r1, r1, #1
 8002cf6:	f1c1 0302 	rsb	r3, r1, #2
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	b182      	cbz	r2, 8002d20 <__ieee754_pow+0xd8>
 8002cfe:	e05d      	b.n	8002dbc <__ieee754_pow+0x174>
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d159      	bne.n	8002db8 <__ieee754_pow+0x170>
 8002d04:	f1c3 0314 	rsb	r3, r3, #20
 8002d08:	fa46 f103 	asr.w	r1, r6, r3
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	42b3      	cmp	r3, r6
 8002d12:	f040 8479 	bne.w	8003608 <__ieee754_pow+0x9c0>
 8002d16:	f001 0101 	and.w	r1, r1, #1
 8002d1a:	f1c1 0302 	rsb	r3, r1, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <__ieee754_pow+0x23c>)
 8002d22:	429e      	cmp	r6, r3
 8002d24:	d132      	bne.n	8002d8c <__ieee754_pow+0x144>
 8002d26:	2f00      	cmp	r7, #0
 8002d28:	f280 846a 	bge.w	8003600 <__ieee754_pow+0x9b8>
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	2000      	movs	r0, #0
 8002d32:	4954      	ldr	r1, [pc, #336]	; (8002e84 <__ieee754_pow+0x23c>)
 8002d34:	f7fd fcf2 	bl	800071c <__aeabi_ddiv>
 8002d38:	e7a3      	b.n	8002c82 <__ieee754_pow+0x3a>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	d13c      	bne.n	8002dbc <__ieee754_pow+0x174>
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <__ieee754_pow+0x234>)
 8002d44:	429e      	cmp	r6, r3
 8002d46:	d1eb      	bne.n	8002d20 <__ieee754_pow+0xd8>
 8002d48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002d4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002d50:	ea53 030a 	orrs.w	r3, r3, sl
 8002d54:	f000 8448 	beq.w	80035e8 <__ieee754_pow+0x9a0>
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <__ieee754_pow+0x240>)
 8002d5a:	429c      	cmp	r4, r3
 8002d5c:	dd0b      	ble.n	8002d76 <__ieee754_pow+0x12e>
 8002d5e:	2f00      	cmp	r7, #0
 8002d60:	f2c0 8448 	blt.w	80035f4 <__ieee754_pow+0x9ac>
 8002d64:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002d68:	4658      	mov	r0, fp
 8002d6a:	4661      	mov	r1, ip
 8002d6c:	b013      	add	sp, #76	; 0x4c
 8002d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d72:	2302      	movs	r3, #2
 8002d74:	e7e2      	b.n	8002d3c <__ieee754_pow+0xf4>
 8002d76:	2f00      	cmp	r7, #0
 8002d78:	f04f 0b00 	mov.w	fp, #0
 8002d7c:	f04f 0c00 	mov.w	ip, #0
 8002d80:	daf2      	bge.n	8002d68 <__ieee754_pow+0x120>
 8002d82:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002d86:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002d8a:	e7ed      	b.n	8002d68 <__ieee754_pow+0x120>
 8002d8c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002d90:	d106      	bne.n	8002da0 <__ieee754_pow+0x158>
 8002d92:	4642      	mov	r2, r8
 8002d94:	464b      	mov	r3, r9
 8002d96:	4640      	mov	r0, r8
 8002d98:	4649      	mov	r1, r9
 8002d9a:	f7fd fb95 	bl	80004c8 <__aeabi_dmul>
 8002d9e:	e770      	b.n	8002c82 <__ieee754_pow+0x3a>
 8002da0:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <__ieee754_pow+0x244>)
 8002da2:	429f      	cmp	r7, r3
 8002da4:	d10a      	bne.n	8002dbc <__ieee754_pow+0x174>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	db08      	blt.n	8002dbc <__ieee754_pow+0x174>
 8002daa:	4640      	mov	r0, r8
 8002dac:	4649      	mov	r1, r9
 8002dae:	b013      	add	sp, #76	; 0x4c
 8002db0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	f000 bc5e 	b.w	8003674 <__ieee754_sqrt>
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	4640      	mov	r0, r8
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	f000 fd34 	bl	800382c <fabs>
 8002dc4:	4683      	mov	fp, r0
 8002dc6:	468c      	mov	ip, r1
 8002dc8:	f1ba 0f00 	cmp.w	sl, #0
 8002dcc:	d128      	bne.n	8002e20 <__ieee754_pow+0x1d8>
 8002dce:	b124      	cbz	r4, 8002dda <__ieee754_pow+0x192>
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <__ieee754_pow+0x23c>)
 8002dd2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d122      	bne.n	8002e20 <__ieee754_pow+0x1d8>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	da07      	bge.n	8002dee <__ieee754_pow+0x1a6>
 8002dde:	465a      	mov	r2, fp
 8002de0:	4663      	mov	r3, ip
 8002de2:	2000      	movs	r0, #0
 8002de4:	4927      	ldr	r1, [pc, #156]	; (8002e84 <__ieee754_pow+0x23c>)
 8002de6:	f7fd fc99 	bl	800071c <__aeabi_ddiv>
 8002dea:	4683      	mov	fp, r0
 8002dec:	468c      	mov	ip, r1
 8002dee:	2d00      	cmp	r5, #0
 8002df0:	daba      	bge.n	8002d68 <__ieee754_pow+0x120>
 8002df2:	9b00      	ldr	r3, [sp, #0]
 8002df4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002df8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002dfc:	4323      	orrs	r3, r4
 8002dfe:	d108      	bne.n	8002e12 <__ieee754_pow+0x1ca>
 8002e00:	465a      	mov	r2, fp
 8002e02:	4663      	mov	r3, ip
 8002e04:	4658      	mov	r0, fp
 8002e06:	4661      	mov	r1, ip
 8002e08:	f7fd f9a6 	bl	8000158 <__aeabi_dsub>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	e790      	b.n	8002d34 <__ieee754_pow+0xec>
 8002e12:	9b00      	ldr	r3, [sp, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d1a7      	bne.n	8002d68 <__ieee754_pow+0x120>
 8002e18:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002e1c:	469c      	mov	ip, r3
 8002e1e:	e7a3      	b.n	8002d68 <__ieee754_pow+0x120>
 8002e20:	0feb      	lsrs	r3, r5, #31
 8002e22:	3b01      	subs	r3, #1
 8002e24:	930c      	str	r3, [sp, #48]	; 0x30
 8002e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	d104      	bne.n	8002e38 <__ieee754_pow+0x1f0>
 8002e2e:	4642      	mov	r2, r8
 8002e30:	464b      	mov	r3, r9
 8002e32:	4640      	mov	r0, r8
 8002e34:	4649      	mov	r1, r9
 8002e36:	e7e7      	b.n	8002e08 <__ieee754_pow+0x1c0>
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <__ieee754_pow+0x248>)
 8002e3a:	429e      	cmp	r6, r3
 8002e3c:	f340 80f6 	ble.w	800302c <__ieee754_pow+0x3e4>
 8002e40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002e44:	429e      	cmp	r6, r3
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <__ieee754_pow+0x240>)
 8002e48:	dd09      	ble.n	8002e5e <__ieee754_pow+0x216>
 8002e4a:	429c      	cmp	r4, r3
 8002e4c:	dc0c      	bgt.n	8002e68 <__ieee754_pow+0x220>
 8002e4e:	2f00      	cmp	r7, #0
 8002e50:	da0c      	bge.n	8002e6c <__ieee754_pow+0x224>
 8002e52:	2000      	movs	r0, #0
 8002e54:	b013      	add	sp, #76	; 0x4c
 8002e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5a:	f000 bce2 	b.w	8003822 <__math_oflow>
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	dbf5      	blt.n	8002e4e <__ieee754_pow+0x206>
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <__ieee754_pow+0x23c>)
 8002e64:	429c      	cmp	r4, r3
 8002e66:	dd15      	ble.n	8002e94 <__ieee754_pow+0x24c>
 8002e68:	2f00      	cmp	r7, #0
 8002e6a:	dcf2      	bgt.n	8002e52 <__ieee754_pow+0x20a>
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	b013      	add	sp, #76	; 0x4c
 8002e70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e74:	f000 bcd0 	b.w	8003818 <__math_uflow>
 8002e78:	fff00000 	.word	0xfff00000
 8002e7c:	7ff00000 	.word	0x7ff00000
 8002e80:	433fffff 	.word	0x433fffff
 8002e84:	3ff00000 	.word	0x3ff00000
 8002e88:	3fefffff 	.word	0x3fefffff
 8002e8c:	3fe00000 	.word	0x3fe00000
 8002e90:	41e00000 	.word	0x41e00000
 8002e94:	4661      	mov	r1, ip
 8002e96:	2200      	movs	r2, #0
 8002e98:	4658      	mov	r0, fp
 8002e9a:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <__ieee754_pow+0x3d0>)
 8002e9c:	f7fd f95c 	bl	8000158 <__aeabi_dsub>
 8002ea0:	a355      	add	r3, pc, #340	; (adr r3, 8002ff8 <__ieee754_pow+0x3b0>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	460d      	mov	r5, r1
 8002eaa:	f7fd fb0d 	bl	80004c8 <__aeabi_dmul>
 8002eae:	a354      	add	r3, pc, #336	; (adr r3, 8003000 <__ieee754_pow+0x3b8>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	460f      	mov	r7, r1
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd fb04 	bl	80004c8 <__aeabi_dmul>
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4682      	mov	sl, r0
 8002ec4:	468b      	mov	fp, r1
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	4629      	mov	r1, r5
 8002eca:	4b54      	ldr	r3, [pc, #336]	; (800301c <__ieee754_pow+0x3d4>)
 8002ecc:	f7fd fafc 	bl	80004c8 <__aeabi_dmul>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	a14c      	add	r1, pc, #304	; (adr r1, 8003008 <__ieee754_pow+0x3c0>)
 8002ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eda:	f7fd f93d 	bl	8000158 <__aeabi_dsub>
 8002ede:	4622      	mov	r2, r4
 8002ee0:	462b      	mov	r3, r5
 8002ee2:	f7fd faf1 	bl	80004c8 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	2000      	movs	r0, #0
 8002eec:	494c      	ldr	r1, [pc, #304]	; (8003020 <__ieee754_pow+0x3d8>)
 8002eee:	f7fd f933 	bl	8000158 <__aeabi_dsub>
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	462b      	mov	r3, r5
 8002ef6:	4680      	mov	r8, r0
 8002ef8:	4689      	mov	r9, r1
 8002efa:	4620      	mov	r0, r4
 8002efc:	4629      	mov	r1, r5
 8002efe:	f7fd fae3 	bl	80004c8 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4640      	mov	r0, r8
 8002f08:	4649      	mov	r1, r9
 8002f0a:	f7fd fadd 	bl	80004c8 <__aeabi_dmul>
 8002f0e:	a340      	add	r3, pc, #256	; (adr r3, 8003010 <__ieee754_pow+0x3c8>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	f7fd fad8 	bl	80004c8 <__aeabi_dmul>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4650      	mov	r0, sl
 8002f1e:	4659      	mov	r1, fp
 8002f20:	f7fd f91a 	bl	8000158 <__aeabi_dsub>
 8002f24:	f04f 0a00 	mov.w	sl, #0
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	460d      	mov	r5, r1
 8002f30:	4630      	mov	r0, r6
 8002f32:	4639      	mov	r1, r7
 8002f34:	f7fd f912 	bl	800015c <__adddf3>
 8002f38:	4632      	mov	r2, r6
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	4650      	mov	r0, sl
 8002f3e:	468b      	mov	fp, r1
 8002f40:	f7fd f90a 	bl	8000158 <__aeabi_dsub>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f7fd f904 	bl	8000158 <__aeabi_dsub>
 8002f50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002f54:	9b00      	ldr	r3, [sp, #0]
 8002f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f04f 0600 	mov.w	r6, #0
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	4b2f      	ldreq	r3, [pc, #188]	; (8003024 <__ieee754_pow+0x3dc>)
 8002f68:	4b2b      	ldrne	r3, [pc, #172]	; (8003018 <__ieee754_pow+0x3d0>)
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f72:	e9cd 2300 	strd	r2, r3, [sp]
 8002f76:	4632      	mov	r2, r6
 8002f78:	463b      	mov	r3, r7
 8002f7a:	f7fd f8ed 	bl	8000158 <__aeabi_dsub>
 8002f7e:	4652      	mov	r2, sl
 8002f80:	465b      	mov	r3, fp
 8002f82:	f7fd faa1 	bl	80004c8 <__aeabi_dmul>
 8002f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f8a:	4680      	mov	r8, r0
 8002f8c:	4689      	mov	r9, r1
 8002f8e:	4620      	mov	r0, r4
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7fd fa99 	bl	80004c8 <__aeabi_dmul>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	f7fd f8dd 	bl	800015c <__adddf3>
 8002fa2:	4632      	mov	r2, r6
 8002fa4:	463b      	mov	r3, r7
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	4689      	mov	r9, r1
 8002faa:	4650      	mov	r0, sl
 8002fac:	4659      	mov	r1, fp
 8002fae:	f7fd fa8b 	bl	80004c8 <__aeabi_dmul>
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	460d      	mov	r5, r1
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4649      	mov	r1, r9
 8002fbc:	4640      	mov	r0, r8
 8002fbe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002fc2:	f7fd f8cb 	bl	800015c <__adddf3>
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <__ieee754_pow+0x3e0>)
 8002fc8:	4682      	mov	sl, r0
 8002fca:	4299      	cmp	r1, r3
 8002fcc:	460f      	mov	r7, r1
 8002fce:	460e      	mov	r6, r1
 8002fd0:	f340 82e5 	ble.w	800359e <__ieee754_pow+0x956>
 8002fd4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002fd8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002fdc:	4303      	orrs	r3, r0
 8002fde:	f000 81df 	beq.w	80033a0 <__ieee754_pow+0x758>
 8002fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f7fd fcdf 	bl	80009ac <__aeabi_dcmplt>
 8002fee:	3800      	subs	r0, #0
 8002ff0:	bf18      	it	ne
 8002ff2:	2001      	movne	r0, #1
 8002ff4:	e72e      	b.n	8002e54 <__ieee754_pow+0x20c>
 8002ff6:	bf00      	nop
 8002ff8:	60000000 	.word	0x60000000
 8002ffc:	3ff71547 	.word	0x3ff71547
 8003000:	f85ddf44 	.word	0xf85ddf44
 8003004:	3e54ae0b 	.word	0x3e54ae0b
 8003008:	55555555 	.word	0x55555555
 800300c:	3fd55555 	.word	0x3fd55555
 8003010:	652b82fe 	.word	0x652b82fe
 8003014:	3ff71547 	.word	0x3ff71547
 8003018:	3ff00000 	.word	0x3ff00000
 800301c:	3fd00000 	.word	0x3fd00000
 8003020:	3fe00000 	.word	0x3fe00000
 8003024:	bff00000 	.word	0xbff00000
 8003028:	408fffff 	.word	0x408fffff
 800302c:	4bd2      	ldr	r3, [pc, #840]	; (8003378 <__ieee754_pow+0x730>)
 800302e:	2200      	movs	r2, #0
 8003030:	402b      	ands	r3, r5
 8003032:	b943      	cbnz	r3, 8003046 <__ieee754_pow+0x3fe>
 8003034:	4658      	mov	r0, fp
 8003036:	4661      	mov	r1, ip
 8003038:	4bd0      	ldr	r3, [pc, #832]	; (800337c <__ieee754_pow+0x734>)
 800303a:	f7fd fa45 	bl	80004c8 <__aeabi_dmul>
 800303e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003042:	4683      	mov	fp, r0
 8003044:	460c      	mov	r4, r1
 8003046:	1523      	asrs	r3, r4, #20
 8003048:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800304c:	4413      	add	r3, r2
 800304e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003050:	4bcb      	ldr	r3, [pc, #812]	; (8003380 <__ieee754_pow+0x738>)
 8003052:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003056:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800305a:	429c      	cmp	r4, r3
 800305c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003060:	dd08      	ble.n	8003074 <__ieee754_pow+0x42c>
 8003062:	4bc8      	ldr	r3, [pc, #800]	; (8003384 <__ieee754_pow+0x73c>)
 8003064:	429c      	cmp	r4, r3
 8003066:	f340 8199 	ble.w	800339c <__ieee754_pow+0x754>
 800306a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800306c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003070:	3301      	adds	r3, #1
 8003072:	930b      	str	r3, [sp, #44]	; 0x2c
 8003074:	2600      	movs	r6, #0
 8003076:	00f3      	lsls	r3, r6, #3
 8003078:	930d      	str	r3, [sp, #52]	; 0x34
 800307a:	4bc3      	ldr	r3, [pc, #780]	; (8003388 <__ieee754_pow+0x740>)
 800307c:	4658      	mov	r0, fp
 800307e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003082:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003086:	4629      	mov	r1, r5
 8003088:	461a      	mov	r2, r3
 800308a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800308e:	4623      	mov	r3, r4
 8003090:	f7fd f862 	bl	8000158 <__aeabi_dsub>
 8003094:	46da      	mov	sl, fp
 8003096:	462b      	mov	r3, r5
 8003098:	4652      	mov	r2, sl
 800309a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800309e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80030a2:	f7fd f85b 	bl	800015c <__adddf3>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	2000      	movs	r0, #0
 80030ac:	49b7      	ldr	r1, [pc, #732]	; (800338c <__ieee754_pow+0x744>)
 80030ae:	f7fd fb35 	bl	800071c <__aeabi_ddiv>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80030be:	f7fd fa03 	bl	80004c8 <__aeabi_dmul>
 80030c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80030c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80030ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80030ce:	2300      	movs	r3, #0
 80030d0:	2200      	movs	r2, #0
 80030d2:	46ab      	mov	fp, r5
 80030d4:	106d      	asrs	r5, r5, #1
 80030d6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80030da:	9304      	str	r3, [sp, #16]
 80030dc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80030e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80030e4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80030e8:	4640      	mov	r0, r8
 80030ea:	4649      	mov	r1, r9
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	f7fd f9ea 	bl	80004c8 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80030fc:	f7fd f82c 	bl	8000158 <__aeabi_dsub>
 8003100:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003104:	4606      	mov	r6, r0
 8003106:	460f      	mov	r7, r1
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd f824 	bl	8000158 <__aeabi_dsub>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4650      	mov	r0, sl
 8003116:	4659      	mov	r1, fp
 8003118:	f7fd f81e 	bl	8000158 <__aeabi_dsub>
 800311c:	4642      	mov	r2, r8
 800311e:	464b      	mov	r3, r9
 8003120:	f7fd f9d2 	bl	80004c8 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4630      	mov	r0, r6
 800312a:	4639      	mov	r1, r7
 800312c:	f7fd f814 	bl	8000158 <__aeabi_dsub>
 8003130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003134:	f7fd f9c8 	bl	80004c8 <__aeabi_dmul>
 8003138:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800313c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7fd f9c0 	bl	80004c8 <__aeabi_dmul>
 8003148:	a379      	add	r3, pc, #484	; (adr r3, 8003330 <__ieee754_pow+0x6e8>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	4604      	mov	r4, r0
 8003150:	460d      	mov	r5, r1
 8003152:	f7fd f9b9 	bl	80004c8 <__aeabi_dmul>
 8003156:	a378      	add	r3, pc, #480	; (adr r3, 8003338 <__ieee754_pow+0x6f0>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fc fffe 	bl	800015c <__adddf3>
 8003160:	4622      	mov	r2, r4
 8003162:	462b      	mov	r3, r5
 8003164:	f7fd f9b0 	bl	80004c8 <__aeabi_dmul>
 8003168:	a375      	add	r3, pc, #468	; (adr r3, 8003340 <__ieee754_pow+0x6f8>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fc fff5 	bl	800015c <__adddf3>
 8003172:	4622      	mov	r2, r4
 8003174:	462b      	mov	r3, r5
 8003176:	f7fd f9a7 	bl	80004c8 <__aeabi_dmul>
 800317a:	a373      	add	r3, pc, #460	; (adr r3, 8003348 <__ieee754_pow+0x700>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fc ffec 	bl	800015c <__adddf3>
 8003184:	4622      	mov	r2, r4
 8003186:	462b      	mov	r3, r5
 8003188:	f7fd f99e 	bl	80004c8 <__aeabi_dmul>
 800318c:	a370      	add	r3, pc, #448	; (adr r3, 8003350 <__ieee754_pow+0x708>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fc ffe3 	bl	800015c <__adddf3>
 8003196:	4622      	mov	r2, r4
 8003198:	462b      	mov	r3, r5
 800319a:	f7fd f995 	bl	80004c8 <__aeabi_dmul>
 800319e:	a36e      	add	r3, pc, #440	; (adr r3, 8003358 <__ieee754_pow+0x710>)
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	f7fc ffda 	bl	800015c <__adddf3>
 80031a8:	4622      	mov	r2, r4
 80031aa:	4606      	mov	r6, r0
 80031ac:	460f      	mov	r7, r1
 80031ae:	462b      	mov	r3, r5
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd f988 	bl	80004c8 <__aeabi_dmul>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4630      	mov	r0, r6
 80031be:	4639      	mov	r1, r7
 80031c0:	f7fd f982 	bl	80004c8 <__aeabi_dmul>
 80031c4:	4604      	mov	r4, r0
 80031c6:	460d      	mov	r5, r1
 80031c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031cc:	4642      	mov	r2, r8
 80031ce:	464b      	mov	r3, r9
 80031d0:	f7fc ffc4 	bl	800015c <__adddf3>
 80031d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80031d8:	f7fd f976 	bl	80004c8 <__aeabi_dmul>
 80031dc:	4622      	mov	r2, r4
 80031de:	462b      	mov	r3, r5
 80031e0:	f7fc ffbc 	bl	800015c <__adddf3>
 80031e4:	4642      	mov	r2, r8
 80031e6:	4606      	mov	r6, r0
 80031e8:	460f      	mov	r7, r1
 80031ea:	464b      	mov	r3, r9
 80031ec:	4640      	mov	r0, r8
 80031ee:	4649      	mov	r1, r9
 80031f0:	f7fd f96a 	bl	80004c8 <__aeabi_dmul>
 80031f4:	2200      	movs	r2, #0
 80031f6:	4b66      	ldr	r3, [pc, #408]	; (8003390 <__ieee754_pow+0x748>)
 80031f8:	4682      	mov	sl, r0
 80031fa:	468b      	mov	fp, r1
 80031fc:	f7fc ffae 	bl	800015c <__adddf3>
 8003200:	4632      	mov	r2, r6
 8003202:	463b      	mov	r3, r7
 8003204:	f7fc ffaa 	bl	800015c <__adddf3>
 8003208:	2400      	movs	r4, #0
 800320a:	460d      	mov	r5, r1
 800320c:	4622      	mov	r2, r4
 800320e:	460b      	mov	r3, r1
 8003210:	4640      	mov	r0, r8
 8003212:	4649      	mov	r1, r9
 8003214:	f7fd f958 	bl	80004c8 <__aeabi_dmul>
 8003218:	2200      	movs	r2, #0
 800321a:	4680      	mov	r8, r0
 800321c:	4689      	mov	r9, r1
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	4b5b      	ldr	r3, [pc, #364]	; (8003390 <__ieee754_pow+0x748>)
 8003224:	f7fc ff98 	bl	8000158 <__aeabi_dsub>
 8003228:	4652      	mov	r2, sl
 800322a:	465b      	mov	r3, fp
 800322c:	f7fc ff94 	bl	8000158 <__aeabi_dsub>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4630      	mov	r0, r6
 8003236:	4639      	mov	r1, r7
 8003238:	f7fc ff8e 	bl	8000158 <__aeabi_dsub>
 800323c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003240:	f7fd f942 	bl	80004c8 <__aeabi_dmul>
 8003244:	4622      	mov	r2, r4
 8003246:	4606      	mov	r6, r0
 8003248:	460f      	mov	r7, r1
 800324a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800324e:	462b      	mov	r3, r5
 8003250:	f7fd f93a 	bl	80004c8 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4630      	mov	r0, r6
 800325a:	4639      	mov	r1, r7
 800325c:	f7fc ff7e 	bl	800015c <__adddf3>
 8003260:	2400      	movs	r4, #0
 8003262:	4606      	mov	r6, r0
 8003264:	460f      	mov	r7, r1
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f7fc ff75 	bl	800015c <__adddf3>
 8003272:	a33b      	add	r3, pc, #236	; (adr r3, 8003360 <__ieee754_pow+0x718>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	4620      	mov	r0, r4
 800327a:	460d      	mov	r5, r1
 800327c:	f7fd f924 	bl	80004c8 <__aeabi_dmul>
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fc ff64 	bl	8000158 <__aeabi_dsub>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4630      	mov	r0, r6
 8003296:	4639      	mov	r1, r7
 8003298:	f7fc ff5e 	bl	8000158 <__aeabi_dsub>
 800329c:	a332      	add	r3, pc, #200	; (adr r3, 8003368 <__ieee754_pow+0x720>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f7fd f911 	bl	80004c8 <__aeabi_dmul>
 80032a6:	a332      	add	r3, pc, #200	; (adr r3, 8003370 <__ieee754_pow+0x728>)
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	4606      	mov	r6, r0
 80032ae:	460f      	mov	r7, r1
 80032b0:	4620      	mov	r0, r4
 80032b2:	4629      	mov	r1, r5
 80032b4:	f7fd f908 	bl	80004c8 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4630      	mov	r0, r6
 80032be:	4639      	mov	r1, r7
 80032c0:	f7fc ff4c 	bl	800015c <__adddf3>
 80032c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80032c6:	4b33      	ldr	r3, [pc, #204]	; (8003394 <__ieee754_pow+0x74c>)
 80032c8:	f04f 0a00 	mov.w	sl, #0
 80032cc:	4413      	add	r3, r2
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f7fc ff43 	bl	800015c <__adddf3>
 80032d6:	4680      	mov	r8, r0
 80032d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80032da:	4689      	mov	r9, r1
 80032dc:	f7fd f88a 	bl	80003f4 <__aeabi_i2d>
 80032e0:	4604      	mov	r4, r0
 80032e2:	460d      	mov	r5, r1
 80032e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80032e6:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <__ieee754_pow+0x750>)
 80032e8:	4413      	add	r3, r2
 80032ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 80032ee:	4642      	mov	r2, r8
 80032f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032f4:	464b      	mov	r3, r9
 80032f6:	f7fc ff31 	bl	800015c <__adddf3>
 80032fa:	4632      	mov	r2, r6
 80032fc:	463b      	mov	r3, r7
 80032fe:	f7fc ff2d 	bl	800015c <__adddf3>
 8003302:	4622      	mov	r2, r4
 8003304:	462b      	mov	r3, r5
 8003306:	f7fc ff29 	bl	800015c <__adddf3>
 800330a:	4622      	mov	r2, r4
 800330c:	462b      	mov	r3, r5
 800330e:	4650      	mov	r0, sl
 8003310:	468b      	mov	fp, r1
 8003312:	f7fc ff21 	bl	8000158 <__aeabi_dsub>
 8003316:	4632      	mov	r2, r6
 8003318:	463b      	mov	r3, r7
 800331a:	f7fc ff1d 	bl	8000158 <__aeabi_dsub>
 800331e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003322:	f7fc ff19 	bl	8000158 <__aeabi_dsub>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4640      	mov	r0, r8
 800332c:	4649      	mov	r1, r9
 800332e:	e60d      	b.n	8002f4c <__ieee754_pow+0x304>
 8003330:	4a454eef 	.word	0x4a454eef
 8003334:	3fca7e28 	.word	0x3fca7e28
 8003338:	93c9db65 	.word	0x93c9db65
 800333c:	3fcd864a 	.word	0x3fcd864a
 8003340:	a91d4101 	.word	0xa91d4101
 8003344:	3fd17460 	.word	0x3fd17460
 8003348:	518f264d 	.word	0x518f264d
 800334c:	3fd55555 	.word	0x3fd55555
 8003350:	db6fabff 	.word	0xdb6fabff
 8003354:	3fdb6db6 	.word	0x3fdb6db6
 8003358:	33333303 	.word	0x33333303
 800335c:	3fe33333 	.word	0x3fe33333
 8003360:	e0000000 	.word	0xe0000000
 8003364:	3feec709 	.word	0x3feec709
 8003368:	dc3a03fd 	.word	0xdc3a03fd
 800336c:	3feec709 	.word	0x3feec709
 8003370:	145b01f5 	.word	0x145b01f5
 8003374:	be3e2fe0 	.word	0xbe3e2fe0
 8003378:	7ff00000 	.word	0x7ff00000
 800337c:	43400000 	.word	0x43400000
 8003380:	0003988e 	.word	0x0003988e
 8003384:	000bb679 	.word	0x000bb679
 8003388:	08003978 	.word	0x08003978
 800338c:	3ff00000 	.word	0x3ff00000
 8003390:	40080000 	.word	0x40080000
 8003394:	08003998 	.word	0x08003998
 8003398:	08003988 	.word	0x08003988
 800339c:	2601      	movs	r6, #1
 800339e:	e66a      	b.n	8003076 <__ieee754_pow+0x42e>
 80033a0:	a39d      	add	r3, pc, #628	; (adr r3, 8003618 <__ieee754_pow+0x9d0>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	4640      	mov	r0, r8
 80033a8:	4649      	mov	r1, r9
 80033aa:	f7fc fed7 	bl	800015c <__adddf3>
 80033ae:	4622      	mov	r2, r4
 80033b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033b4:	462b      	mov	r3, r5
 80033b6:	4650      	mov	r0, sl
 80033b8:	4639      	mov	r1, r7
 80033ba:	f7fc fecd 	bl	8000158 <__aeabi_dsub>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033c6:	f7fd fb0f 	bl	80009e8 <__aeabi_dcmpgt>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	f47f ae09 	bne.w	8002fe2 <__ieee754_pow+0x39a>
 80033d0:	4aa3      	ldr	r2, [pc, #652]	; (8003660 <__ieee754_pow+0xa18>)
 80033d2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f340 8101 	ble.w	80035de <__ieee754_pow+0x996>
 80033dc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80033e0:	2000      	movs	r0, #0
 80033e2:	151b      	asrs	r3, r3, #20
 80033e4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80033e8:	fa4a f303 	asr.w	r3, sl, r3
 80033ec:	4433      	add	r3, r6
 80033ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80033f2:	4f9c      	ldr	r7, [pc, #624]	; (8003664 <__ieee754_pow+0xa1c>)
 80033f4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80033f8:	4117      	asrs	r7, r2
 80033fa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80033fe:	ea23 0107 	bic.w	r1, r3, r7
 8003402:	f1c2 0214 	rsb	r2, r2, #20
 8003406:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800340a:	460b      	mov	r3, r1
 800340c:	fa4a fa02 	asr.w	sl, sl, r2
 8003410:	2e00      	cmp	r6, #0
 8003412:	4602      	mov	r2, r0
 8003414:	4629      	mov	r1, r5
 8003416:	4620      	mov	r0, r4
 8003418:	bfb8      	it	lt
 800341a:	f1ca 0a00 	rsblt	sl, sl, #0
 800341e:	f7fc fe9b 	bl	8000158 <__aeabi_dsub>
 8003422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800342a:	2400      	movs	r4, #0
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	f7fc fe94 	bl	800015c <__adddf3>
 8003434:	a37a      	add	r3, pc, #488	; (adr r3, 8003620 <__ieee754_pow+0x9d8>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	4620      	mov	r0, r4
 800343c:	460d      	mov	r5, r1
 800343e:	f7fd f843 	bl	80004c8 <__aeabi_dmul>
 8003442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003446:	4606      	mov	r6, r0
 8003448:	460f      	mov	r7, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fc fe83 	bl	8000158 <__aeabi_dsub>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4640      	mov	r0, r8
 8003458:	4649      	mov	r1, r9
 800345a:	f7fc fe7d 	bl	8000158 <__aeabi_dsub>
 800345e:	a372      	add	r3, pc, #456	; (adr r3, 8003628 <__ieee754_pow+0x9e0>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd f830 	bl	80004c8 <__aeabi_dmul>
 8003468:	a371      	add	r3, pc, #452	; (adr r3, 8003630 <__ieee754_pow+0x9e8>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	4680      	mov	r8, r0
 8003470:	4689      	mov	r9, r1
 8003472:	4620      	mov	r0, r4
 8003474:	4629      	mov	r1, r5
 8003476:	f7fd f827 	bl	80004c8 <__aeabi_dmul>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4640      	mov	r0, r8
 8003480:	4649      	mov	r1, r9
 8003482:	f7fc fe6b 	bl	800015c <__adddf3>
 8003486:	4604      	mov	r4, r0
 8003488:	460d      	mov	r5, r1
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4630      	mov	r0, r6
 8003490:	4639      	mov	r1, r7
 8003492:	f7fc fe63 	bl	800015c <__adddf3>
 8003496:	4632      	mov	r2, r6
 8003498:	463b      	mov	r3, r7
 800349a:	4680      	mov	r8, r0
 800349c:	4689      	mov	r9, r1
 800349e:	f7fc fe5b 	bl	8000158 <__aeabi_dsub>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f7fc fe55 	bl	8000158 <__aeabi_dsub>
 80034ae:	4642      	mov	r2, r8
 80034b0:	4606      	mov	r6, r0
 80034b2:	460f      	mov	r7, r1
 80034b4:	464b      	mov	r3, r9
 80034b6:	4640      	mov	r0, r8
 80034b8:	4649      	mov	r1, r9
 80034ba:	f7fd f805 	bl	80004c8 <__aeabi_dmul>
 80034be:	a35e      	add	r3, pc, #376	; (adr r3, 8003638 <__ieee754_pow+0x9f0>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	4604      	mov	r4, r0
 80034c6:	460d      	mov	r5, r1
 80034c8:	f7fc fffe 	bl	80004c8 <__aeabi_dmul>
 80034cc:	a35c      	add	r3, pc, #368	; (adr r3, 8003640 <__ieee754_pow+0x9f8>)
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f7fc fe41 	bl	8000158 <__aeabi_dsub>
 80034d6:	4622      	mov	r2, r4
 80034d8:	462b      	mov	r3, r5
 80034da:	f7fc fff5 	bl	80004c8 <__aeabi_dmul>
 80034de:	a35a      	add	r3, pc, #360	; (adr r3, 8003648 <__ieee754_pow+0xa00>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fc fe3a 	bl	800015c <__adddf3>
 80034e8:	4622      	mov	r2, r4
 80034ea:	462b      	mov	r3, r5
 80034ec:	f7fc ffec 	bl	80004c8 <__aeabi_dmul>
 80034f0:	a357      	add	r3, pc, #348	; (adr r3, 8003650 <__ieee754_pow+0xa08>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f7fc fe2f 	bl	8000158 <__aeabi_dsub>
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	f7fc ffe3 	bl	80004c8 <__aeabi_dmul>
 8003502:	a355      	add	r3, pc, #340	; (adr r3, 8003658 <__ieee754_pow+0xa10>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fc fe28 	bl	800015c <__adddf3>
 800350c:	4622      	mov	r2, r4
 800350e:	462b      	mov	r3, r5
 8003510:	f7fc ffda 	bl	80004c8 <__aeabi_dmul>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4640      	mov	r0, r8
 800351a:	4649      	mov	r1, r9
 800351c:	f7fc fe1c 	bl	8000158 <__aeabi_dsub>
 8003520:	4604      	mov	r4, r0
 8003522:	460d      	mov	r5, r1
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4640      	mov	r0, r8
 800352a:	4649      	mov	r1, r9
 800352c:	f7fc ffcc 	bl	80004c8 <__aeabi_dmul>
 8003530:	2200      	movs	r2, #0
 8003532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f7fc fe0b 	bl	8000158 <__aeabi_dsub>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800354a:	f7fd f8e7 	bl	800071c <__aeabi_ddiv>
 800354e:	4632      	mov	r2, r6
 8003550:	4604      	mov	r4, r0
 8003552:	460d      	mov	r5, r1
 8003554:	463b      	mov	r3, r7
 8003556:	4640      	mov	r0, r8
 8003558:	4649      	mov	r1, r9
 800355a:	f7fc ffb5 	bl	80004c8 <__aeabi_dmul>
 800355e:	4632      	mov	r2, r6
 8003560:	463b      	mov	r3, r7
 8003562:	f7fc fdfb 	bl	800015c <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4620      	mov	r0, r4
 800356c:	4629      	mov	r1, r5
 800356e:	f7fc fdf3 	bl	8000158 <__aeabi_dsub>
 8003572:	4642      	mov	r2, r8
 8003574:	464b      	mov	r3, r9
 8003576:	f7fc fdef 	bl	8000158 <__aeabi_dsub>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	2000      	movs	r0, #0
 8003580:	4939      	ldr	r1, [pc, #228]	; (8003668 <__ieee754_pow+0xa20>)
 8003582:	f7fc fde9 	bl	8000158 <__aeabi_dsub>
 8003586:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800358a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800358e:	da29      	bge.n	80035e4 <__ieee754_pow+0x99c>
 8003590:	4652      	mov	r2, sl
 8003592:	f000 f955 	bl	8003840 <scalbn>
 8003596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800359a:	f7ff bbfe 	b.w	8002d9a <__ieee754_pow+0x152>
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <__ieee754_pow+0xa24>)
 80035a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80035a4:	429f      	cmp	r7, r3
 80035a6:	f77f af13 	ble.w	80033d0 <__ieee754_pow+0x788>
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <__ieee754_pow+0xa28>)
 80035ac:	440b      	add	r3, r1
 80035ae:	4303      	orrs	r3, r0
 80035b0:	d009      	beq.n	80035c6 <__ieee754_pow+0x97e>
 80035b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2300      	movs	r3, #0
 80035ba:	f7fd f9f7 	bl	80009ac <__aeabi_dcmplt>
 80035be:	3800      	subs	r0, #0
 80035c0:	bf18      	it	ne
 80035c2:	2001      	movne	r0, #1
 80035c4:	e453      	b.n	8002e6e <__ieee754_pow+0x226>
 80035c6:	4622      	mov	r2, r4
 80035c8:	462b      	mov	r3, r5
 80035ca:	f7fc fdc5 	bl	8000158 <__aeabi_dsub>
 80035ce:	4642      	mov	r2, r8
 80035d0:	464b      	mov	r3, r9
 80035d2:	f7fd f9ff 	bl	80009d4 <__aeabi_dcmpge>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	f43f aefa 	beq.w	80033d0 <__ieee754_pow+0x788>
 80035dc:	e7e9      	b.n	80035b2 <__ieee754_pow+0x96a>
 80035de:	f04f 0a00 	mov.w	sl, #0
 80035e2:	e720      	b.n	8003426 <__ieee754_pow+0x7de>
 80035e4:	4621      	mov	r1, r4
 80035e6:	e7d6      	b.n	8003596 <__ieee754_pow+0x94e>
 80035e8:	f04f 0b00 	mov.w	fp, #0
 80035ec:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003668 <__ieee754_pow+0xa20>
 80035f0:	f7ff bbba 	b.w	8002d68 <__ieee754_pow+0x120>
 80035f4:	f04f 0b00 	mov.w	fp, #0
 80035f8:	f04f 0c00 	mov.w	ip, #0
 80035fc:	f7ff bbb4 	b.w	8002d68 <__ieee754_pow+0x120>
 8003600:	4640      	mov	r0, r8
 8003602:	4649      	mov	r1, r9
 8003604:	f7ff bb3d 	b.w	8002c82 <__ieee754_pow+0x3a>
 8003608:	9200      	str	r2, [sp, #0]
 800360a:	f7ff bb89 	b.w	8002d20 <__ieee754_pow+0xd8>
 800360e:	2300      	movs	r3, #0
 8003610:	f7ff bb73 	b.w	8002cfa <__ieee754_pow+0xb2>
 8003614:	f3af 8000 	nop.w
 8003618:	652b82fe 	.word	0x652b82fe
 800361c:	3c971547 	.word	0x3c971547
 8003620:	00000000 	.word	0x00000000
 8003624:	3fe62e43 	.word	0x3fe62e43
 8003628:	fefa39ef 	.word	0xfefa39ef
 800362c:	3fe62e42 	.word	0x3fe62e42
 8003630:	0ca86c39 	.word	0x0ca86c39
 8003634:	be205c61 	.word	0xbe205c61
 8003638:	72bea4d0 	.word	0x72bea4d0
 800363c:	3e663769 	.word	0x3e663769
 8003640:	c5d26bf1 	.word	0xc5d26bf1
 8003644:	3ebbbd41 	.word	0x3ebbbd41
 8003648:	af25de2c 	.word	0xaf25de2c
 800364c:	3f11566a 	.word	0x3f11566a
 8003650:	16bebd93 	.word	0x16bebd93
 8003654:	3f66c16c 	.word	0x3f66c16c
 8003658:	5555553e 	.word	0x5555553e
 800365c:	3fc55555 	.word	0x3fc55555
 8003660:	3fe00000 	.word	0x3fe00000
 8003664:	000fffff 	.word	0x000fffff
 8003668:	3ff00000 	.word	0x3ff00000
 800366c:	4090cbff 	.word	0x4090cbff
 8003670:	3f6f3400 	.word	0x3f6f3400

08003674 <__ieee754_sqrt>:
 8003674:	f8df c158 	ldr.w	ip, [pc, #344]	; 80037d0 <__ieee754_sqrt+0x15c>
 8003678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800367c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003680:	4606      	mov	r6, r0
 8003682:	460d      	mov	r5, r1
 8003684:	460c      	mov	r4, r1
 8003686:	460a      	mov	r2, r1
 8003688:	4607      	mov	r7, r0
 800368a:	4603      	mov	r3, r0
 800368c:	d10f      	bne.n	80036ae <__ieee754_sqrt+0x3a>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	f7fc ff19 	bl	80004c8 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4630      	mov	r0, r6
 800369c:	4629      	mov	r1, r5
 800369e:	f7fc fd5d 	bl	800015c <__adddf3>
 80036a2:	4606      	mov	r6, r0
 80036a4:	460d      	mov	r5, r1
 80036a6:	4630      	mov	r0, r6
 80036a8:	4629      	mov	r1, r5
 80036aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ae:	2900      	cmp	r1, #0
 80036b0:	dc0e      	bgt.n	80036d0 <__ieee754_sqrt+0x5c>
 80036b2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80036b6:	ea5c 0707 	orrs.w	r7, ip, r7
 80036ba:	d0f4      	beq.n	80036a6 <__ieee754_sqrt+0x32>
 80036bc:	b141      	cbz	r1, 80036d0 <__ieee754_sqrt+0x5c>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	f7fc fd49 	bl	8000158 <__aeabi_dsub>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	f7fd f827 	bl	800071c <__aeabi_ddiv>
 80036ce:	e7e8      	b.n	80036a2 <__ieee754_sqrt+0x2e>
 80036d0:	1521      	asrs	r1, r4, #20
 80036d2:	d075      	beq.n	80037c0 <__ieee754_sqrt+0x14c>
 80036d4:	07cc      	lsls	r4, r1, #31
 80036d6:	f04f 0400 	mov.w	r4, #0
 80036da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80036de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80036e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036e6:	bf5e      	ittt	pl
 80036e8:	0fd9      	lsrpl	r1, r3, #31
 80036ea:	005b      	lslpl	r3, r3, #1
 80036ec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80036f0:	0fd9      	lsrs	r1, r3, #31
 80036f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80036f6:	2516      	movs	r5, #22
 80036f8:	4620      	mov	r0, r4
 80036fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036fe:	107f      	asrs	r7, r7, #1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	1846      	adds	r6, r0, r1
 8003704:	4296      	cmp	r6, r2
 8003706:	bfde      	ittt	le
 8003708:	1b92      	suble	r2, r2, r6
 800370a:	1870      	addle	r0, r6, r1
 800370c:	1864      	addle	r4, r4, r1
 800370e:	0052      	lsls	r2, r2, #1
 8003710:	3d01      	subs	r5, #1
 8003712:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003716:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800371a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800371e:	d1f0      	bne.n	8003702 <__ieee754_sqrt+0x8e>
 8003720:	4629      	mov	r1, r5
 8003722:	f04f 0e20 	mov.w	lr, #32
 8003726:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800372a:	4282      	cmp	r2, r0
 800372c:	eb06 0c05 	add.w	ip, r6, r5
 8003730:	dc02      	bgt.n	8003738 <__ieee754_sqrt+0xc4>
 8003732:	d113      	bne.n	800375c <__ieee754_sqrt+0xe8>
 8003734:	459c      	cmp	ip, r3
 8003736:	d811      	bhi.n	800375c <__ieee754_sqrt+0xe8>
 8003738:	f1bc 0f00 	cmp.w	ip, #0
 800373c:	eb0c 0506 	add.w	r5, ip, r6
 8003740:	da43      	bge.n	80037ca <__ieee754_sqrt+0x156>
 8003742:	2d00      	cmp	r5, #0
 8003744:	db41      	blt.n	80037ca <__ieee754_sqrt+0x156>
 8003746:	f100 0801 	add.w	r8, r0, #1
 800374a:	1a12      	subs	r2, r2, r0
 800374c:	4640      	mov	r0, r8
 800374e:	459c      	cmp	ip, r3
 8003750:	bf88      	it	hi
 8003752:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003756:	eba3 030c 	sub.w	r3, r3, ip
 800375a:	4431      	add	r1, r6
 800375c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003760:	f1be 0e01 	subs.w	lr, lr, #1
 8003764:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003768:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800376c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003770:	d1db      	bne.n	800372a <__ieee754_sqrt+0xb6>
 8003772:	4313      	orrs	r3, r2
 8003774:	d006      	beq.n	8003784 <__ieee754_sqrt+0x110>
 8003776:	1c48      	adds	r0, r1, #1
 8003778:	bf0b      	itete	eq
 800377a:	4671      	moveq	r1, lr
 800377c:	3101      	addne	r1, #1
 800377e:	3401      	addeq	r4, #1
 8003780:	f021 0101 	bicne.w	r1, r1, #1
 8003784:	1063      	asrs	r3, r4, #1
 8003786:	0849      	lsrs	r1, r1, #1
 8003788:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800378c:	07e2      	lsls	r2, r4, #31
 800378e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003792:	bf48      	it	mi
 8003794:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003798:	460e      	mov	r6, r1
 800379a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800379e:	e782      	b.n	80036a6 <__ieee754_sqrt+0x32>
 80037a0:	0ada      	lsrs	r2, r3, #11
 80037a2:	3815      	subs	r0, #21
 80037a4:	055b      	lsls	r3, r3, #21
 80037a6:	2a00      	cmp	r2, #0
 80037a8:	d0fa      	beq.n	80037a0 <__ieee754_sqrt+0x12c>
 80037aa:	02d5      	lsls	r5, r2, #11
 80037ac:	d50a      	bpl.n	80037c4 <__ieee754_sqrt+0x150>
 80037ae:	f1c1 0420 	rsb	r4, r1, #32
 80037b2:	fa23 f404 	lsr.w	r4, r3, r4
 80037b6:	1e4d      	subs	r5, r1, #1
 80037b8:	408b      	lsls	r3, r1
 80037ba:	4322      	orrs	r2, r4
 80037bc:	1b41      	subs	r1, r0, r5
 80037be:	e789      	b.n	80036d4 <__ieee754_sqrt+0x60>
 80037c0:	4608      	mov	r0, r1
 80037c2:	e7f0      	b.n	80037a6 <__ieee754_sqrt+0x132>
 80037c4:	0052      	lsls	r2, r2, #1
 80037c6:	3101      	adds	r1, #1
 80037c8:	e7ef      	b.n	80037aa <__ieee754_sqrt+0x136>
 80037ca:	4680      	mov	r8, r0
 80037cc:	e7bd      	b.n	800374a <__ieee754_sqrt+0xd6>
 80037ce:	bf00      	nop
 80037d0:	7ff00000 	.word	0x7ff00000

080037d4 <with_errno>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4604      	mov	r4, r0
 80037d8:	460d      	mov	r5, r1
 80037da:	4616      	mov	r6, r2
 80037dc:	f7ff f998 	bl	8002b10 <__errno>
 80037e0:	4629      	mov	r1, r5
 80037e2:	6006      	str	r6, [r0, #0]
 80037e4:	4620      	mov	r0, r4
 80037e6:	bd70      	pop	{r4, r5, r6, pc}

080037e8 <xflow>:
 80037e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037ea:	4615      	mov	r5, r2
 80037ec:	461c      	mov	r4, r3
 80037ee:	b180      	cbz	r0, 8003812 <xflow+0x2a>
 80037f0:	4610      	mov	r0, r2
 80037f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80037f6:	e9cd 0100 	strd	r0, r1, [sp]
 80037fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037fe:	4628      	mov	r0, r5
 8003800:	4621      	mov	r1, r4
 8003802:	f7fc fe61 	bl	80004c8 <__aeabi_dmul>
 8003806:	2222      	movs	r2, #34	; 0x22
 8003808:	b003      	add	sp, #12
 800380a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800380e:	f7ff bfe1 	b.w	80037d4 <with_errno>
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	e7ee      	b.n	80037f6 <xflow+0xe>

08003818 <__math_uflow>:
 8003818:	2200      	movs	r2, #0
 800381a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800381e:	f7ff bfe3 	b.w	80037e8 <xflow>

08003822 <__math_oflow>:
 8003822:	2200      	movs	r2, #0
 8003824:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003828:	f7ff bfde 	b.w	80037e8 <xflow>

0800382c <fabs>:
 800382c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003830:	4770      	bx	lr

08003832 <finite>:
 8003832:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003836:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800383a:	0fc0      	lsrs	r0, r0, #31
 800383c:	4770      	bx	lr
	...

08003840 <scalbn>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003846:	4604      	mov	r4, r0
 8003848:	460d      	mov	r5, r1
 800384a:	4617      	mov	r7, r2
 800384c:	460b      	mov	r3, r1
 800384e:	b996      	cbnz	r6, 8003876 <scalbn+0x36>
 8003850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003854:	4303      	orrs	r3, r0
 8003856:	d039      	beq.n	80038cc <scalbn+0x8c>
 8003858:	4b33      	ldr	r3, [pc, #204]	; (8003928 <scalbn+0xe8>)
 800385a:	2200      	movs	r2, #0
 800385c:	f7fc fe34 	bl	80004c8 <__aeabi_dmul>
 8003860:	4b32      	ldr	r3, [pc, #200]	; (800392c <scalbn+0xec>)
 8003862:	4604      	mov	r4, r0
 8003864:	429f      	cmp	r7, r3
 8003866:	460d      	mov	r5, r1
 8003868:	da0f      	bge.n	800388a <scalbn+0x4a>
 800386a:	a32b      	add	r3, pc, #172	; (adr r3, 8003918 <scalbn+0xd8>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f7fc fe2a 	bl	80004c8 <__aeabi_dmul>
 8003874:	e006      	b.n	8003884 <scalbn+0x44>
 8003876:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800387a:	4296      	cmp	r6, r2
 800387c:	d10a      	bne.n	8003894 <scalbn+0x54>
 800387e:	4602      	mov	r2, r0
 8003880:	f7fc fc6c 	bl	800015c <__adddf3>
 8003884:	4604      	mov	r4, r0
 8003886:	460d      	mov	r5, r1
 8003888:	e020      	b.n	80038cc <scalbn+0x8c>
 800388a:	460b      	mov	r3, r1
 800388c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003890:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003894:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003898:	19b9      	adds	r1, r7, r6
 800389a:	4291      	cmp	r1, r2
 800389c:	dd0e      	ble.n	80038bc <scalbn+0x7c>
 800389e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80038a2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80038a6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80038aa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80038ae:	4820      	ldr	r0, [pc, #128]	; (8003930 <scalbn+0xf0>)
 80038b0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80038b4:	a31a      	add	r3, pc, #104	; (adr r3, 8003920 <scalbn+0xe0>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	e7d9      	b.n	8003870 <scalbn+0x30>
 80038bc:	2900      	cmp	r1, #0
 80038be:	dd08      	ble.n	80038d2 <scalbn+0x92>
 80038c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80038c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80038cc:	4620      	mov	r0, r4
 80038ce:	4629      	mov	r1, r5
 80038d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80038d6:	da12      	bge.n	80038fe <scalbn+0xbe>
 80038d8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80038dc:	429f      	cmp	r7, r3
 80038de:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80038e2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80038e6:	dcdc      	bgt.n	80038a2 <scalbn+0x62>
 80038e8:	a30b      	add	r3, pc, #44	; (adr r3, 8003918 <scalbn+0xd8>)
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80038f2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80038f6:	480f      	ldr	r0, [pc, #60]	; (8003934 <scalbn+0xf4>)
 80038f8:	f041 011f 	orr.w	r1, r1, #31
 80038fc:	e7b8      	b.n	8003870 <scalbn+0x30>
 80038fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003902:	3136      	adds	r1, #54	; 0x36
 8003904:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003908:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	2200      	movs	r2, #0
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <scalbn+0xf8>)
 8003914:	e7ac      	b.n	8003870 <scalbn+0x30>
 8003916:	bf00      	nop
 8003918:	c2f8f359 	.word	0xc2f8f359
 800391c:	01a56e1f 	.word	0x01a56e1f
 8003920:	8800759c 	.word	0x8800759c
 8003924:	7e37e43c 	.word	0x7e37e43c
 8003928:	43500000 	.word	0x43500000
 800392c:	ffff3cb0 	.word	0xffff3cb0
 8003930:	8800759c 	.word	0x8800759c
 8003934:	c2f8f359 	.word	0xc2f8f359
 8003938:	3c900000 	.word	0x3c900000

0800393c <_init>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr

08003948 <_fini>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr
